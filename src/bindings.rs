/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const WITH_CGRAPH: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _ASSERT_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGIOT: u32 = 6;
pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const SIGBUS: u32 = 7;
pub const SIGSYS: u32 = 31;
pub const SIGURG: u32 = 23;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGCONT: u32 = 18;
pub const SIGCHLD: u32 = 17;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 29;
pub const SIGXFSZ: u32 = 25;
pub const SIGXCPU: u32 = 24;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 10;
pub const SIGUSR2: u32 = 12;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGCLD: u32 = 17;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const _NSIG: u32 = 65;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __time_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 65;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const SQRT2: f64 = 1.4142135623730951;
pub const POINTS_PER_INCH: u32 = 72;
pub const MILLIPOINT: f64 = 0.001;
pub const GV_TEXTFONT_FLAGS_WIDTH: u32 = 7;
pub const HTML_BF: u32 = 1;
pub const HTML_IF: u32 = 2;
pub const HTML_UL: u32 = 4;
pub const HTML_SUP: u32 = 8;
pub const HTML_SUB: u32 = 16;
pub const HTML_S: u32 = 32;
pub const HTML_OL: u32 = 64;
pub const CDT_VERSION: u32 = 20050420;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const DT_SET: u32 = 1;
pub const DT_OSET: u32 = 4;
pub const DT_OBAG: u32 = 8;
pub const DT_METHODS: u32 = 255;
pub const DT_INSERT: u32 = 1;
pub const DT_DELETE: u32 = 2;
pub const DT_SEARCH: u32 = 4;
pub const DT_NEXT: u32 = 8;
pub const DT_PREV: u32 = 16;
pub const DT_RENEW: u32 = 32;
pub const DT_CLEAR: u32 = 64;
pub const DT_FIRST: u32 = 128;
pub const DT_LAST: u32 = 256;
pub const DT_MATCH: u32 = 512;
pub const DT_VSEARCH: u32 = 1024;
pub const DT_DETACH: u32 = 4096;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const TAILPORT_ID: &[u8; 9] = b"tailport\0";
pub const HEADPORT_ID: &[u8; 9] = b"headport\0";
pub const TAIL_ID: &[u8; 9] = b"tailport\0";
pub const HEAD_ID: &[u8; 9] = b"headport\0";
pub const GUI_STATE_ACTIVE: u32 = 1;
pub const GUI_STATE_SELECTED: u32 = 2;
pub const GUI_STATE_VISITED: u32 = 4;
pub const GUI_STATE_DELETED: u32 = 8;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
    -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
unsafe extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
pub type pid_t = __pid_t;
pub type uid_t = __uid_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::si_pid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_1, si_pid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::si_uid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_1, si_uid) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_tid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_tid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_overrun"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_overrun) - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_sigval"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_sigval) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_pid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_pid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_uid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_uid) - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_sigval"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_sigval) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_pid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_pid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_uid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_uid) - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_status"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_status) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_utime"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_utime) - 16usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_stime"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_stime) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(
        ) - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_lower"]
        [::std::mem::offset_of!(
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            _lower
        ) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_upper"]
        [::std::mem::offset_of!(
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            _upper
        ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_addr_bnd"][::std::mem::offset_of!(
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _addr_bnd
    ) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_pkey"][::std::mem::offset_of!(
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _pkey
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>() - 32usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::si_addr"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, si_addr) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::si_addr_lsb"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, si_addr_lsb) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::_bounds"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, _bounds) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_6::si_band"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_6, si_band) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_6::si_fd"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_6, si_fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_call_addr"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _call_addr) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_syscall"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _syscall) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_arch"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _arch) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1>() - 112usize];
    ["Alignment of siginfo_t__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_kill"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _kill) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_timer"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _timer) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_rt"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _rt) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigchld"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigchld) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigfault"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigfault) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigpoll"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigpoll) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigsys"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigsys) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t"][::std::mem::size_of::<siginfo_t>() - 128usize];
    ["Alignment of siginfo_t"][::std::mem::align_of::<siginfo_t>() - 8usize];
    ["Offset of field: siginfo_t::si_signo"][::std::mem::offset_of!(siginfo_t, si_signo) - 0usize];
    ["Offset of field: siginfo_t::si_errno"][::std::mem::offset_of!(siginfo_t, si_errno) - 4usize];
    ["Offset of field: siginfo_t::si_code"][::std::mem::offset_of!(siginfo_t, si_code) - 8usize];
    ["Offset of field: siginfo_t::__pad0"][::std::mem::offset_of!(siginfo_t, __pad0) - 12usize];
    ["Offset of field: siginfo_t::_sifields"]
        [::std::mem::offset_of!(siginfo_t, _sifields) - 16usize];
};
pub const SI_ASYNCNL: _bindgen_ty_1 = -60;
pub const SI_DETHREAD: _bindgen_ty_1 = -7;
pub const SI_TKILL: _bindgen_ty_1 = -6;
pub const SI_SIGIO: _bindgen_ty_1 = -5;
pub const SI_ASYNCIO: _bindgen_ty_1 = -4;
pub const SI_MESGQ: _bindgen_ty_1 = -3;
pub const SI_TIMER: _bindgen_ty_1 = -2;
pub const SI_QUEUE: _bindgen_ty_1 = -1;
pub const SI_USER: _bindgen_ty_1 = 0;
pub const SI_KERNEL: _bindgen_ty_1 = 128;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_2 = 1;
pub const ILL_ILLOPN: _bindgen_ty_2 = 2;
pub const ILL_ILLADR: _bindgen_ty_2 = 3;
pub const ILL_ILLTRP: _bindgen_ty_2 = 4;
pub const ILL_PRVOPC: _bindgen_ty_2 = 5;
pub const ILL_PRVREG: _bindgen_ty_2 = 6;
pub const ILL_COPROC: _bindgen_ty_2 = 7;
pub const ILL_BADSTK: _bindgen_ty_2 = 8;
pub const ILL_BADIADDR: _bindgen_ty_2 = 9;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_3 = 1;
pub const FPE_INTOVF: _bindgen_ty_3 = 2;
pub const FPE_FLTDIV: _bindgen_ty_3 = 3;
pub const FPE_FLTOVF: _bindgen_ty_3 = 4;
pub const FPE_FLTUND: _bindgen_ty_3 = 5;
pub const FPE_FLTRES: _bindgen_ty_3 = 6;
pub const FPE_FLTINV: _bindgen_ty_3 = 7;
pub const FPE_FLTSUB: _bindgen_ty_3 = 8;
pub const FPE_FLTUNK: _bindgen_ty_3 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_3 = 15;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_4 = 1;
pub const SEGV_ACCERR: _bindgen_ty_4 = 2;
pub const SEGV_BNDERR: _bindgen_ty_4 = 3;
pub const SEGV_PKUERR: _bindgen_ty_4 = 4;
pub const SEGV_ACCADI: _bindgen_ty_4 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_4 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_4 = 7;
pub const SEGV_MTEAERR: _bindgen_ty_4 = 8;
pub const SEGV_MTESERR: _bindgen_ty_4 = 9;
pub const SEGV_CPERR: _bindgen_ty_4 = 10;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_5 = 1;
pub const BUS_ADRERR: _bindgen_ty_5 = 2;
pub const BUS_OBJERR: _bindgen_ty_5 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_5 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_5 = 5;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_6 = 1;
pub const CLD_KILLED: _bindgen_ty_6 = 2;
pub const CLD_DUMPED: _bindgen_ty_6 = 3;
pub const CLD_TRAPPED: _bindgen_ty_6 = 4;
pub const CLD_STOPPED: _bindgen_ty_6 = 5;
pub const CLD_CONTINUED: _bindgen_ty_6 = 6;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_7 = 1;
pub const POLL_OUT: _bindgen_ty_7 = 2;
pub const POLL_MSG: _bindgen_ty_7 = 3;
pub const POLL_ERR: _bindgen_ty_7 = 4;
pub const POLL_PRI: _bindgen_ty_7 = 5;
pub const POLL_HUP: _bindgen_ty_7 = 6;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_function"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _function) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_attribute"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _attribute) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1"][::std::mem::size_of::<sigevent__bindgen_ty_1>() - 48usize];
    ["Alignment of sigevent__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_tid"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _tid) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_sigev_thread"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _sigev_thread) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 64usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 12usize];
    ["Offset of field: sigevent::_sigev_un"][::std::mem::offset_of!(sigevent, _sigev_un) - 16usize];
};
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_8 = 0;
pub const SIGEV_NONE: _bindgen_ty_8 = 1;
pub const SIGEV_THREAD: _bindgen_ty_8 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
unsafe extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
    -> __sighandler_t;
}
unsafe extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
unsafe extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
unsafe extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
unsafe extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction__bindgen_ty_1"][::std::mem::size_of::<sigaction__bindgen_ty_1>() - 8usize];
    ["Alignment of sigaction__bindgen_ty_1"]
        [::std::mem::align_of::<sigaction__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigaction__bindgen_ty_1::sa_handler"]
        [::std::mem::offset_of!(sigaction__bindgen_ty_1, sa_handler) - 0usize];
    ["Offset of field: sigaction__bindgen_ty_1::sa_sigaction"]
        [::std::mem::offset_of!(sigaction__bindgen_ty_1, sa_sigaction) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 152usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_handler"]
        [::std::mem::offset_of!(sigaction, __sigaction_handler) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"]
        [::std::mem::offset_of!(sigaction, sa_flags) - 136usize];
    ["Offset of field: sigaction::sa_restorer"]
        [::std::mem::offset_of!(sigaction, sa_restorer) - 144usize];
};
unsafe extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpx_sw_bytes"][::std::mem::size_of::<_fpx_sw_bytes>() - 48usize];
    ["Alignment of _fpx_sw_bytes"][::std::mem::align_of::<_fpx_sw_bytes>() - 8usize];
    ["Offset of field: _fpx_sw_bytes::magic1"]
        [::std::mem::offset_of!(_fpx_sw_bytes, magic1) - 0usize];
    ["Offset of field: _fpx_sw_bytes::extended_size"]
        [::std::mem::offset_of!(_fpx_sw_bytes, extended_size) - 4usize];
    ["Offset of field: _fpx_sw_bytes::xstate_bv"]
        [::std::mem::offset_of!(_fpx_sw_bytes, xstate_bv) - 8usize];
    ["Offset of field: _fpx_sw_bytes::xstate_size"]
        [::std::mem::offset_of!(_fpx_sw_bytes, xstate_size) - 16usize];
    ["Offset of field: _fpx_sw_bytes::__glibc_reserved1"]
        [::std::mem::offset_of!(_fpx_sw_bytes, __glibc_reserved1) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpreg"][::std::mem::size_of::<_fpreg>() - 10usize];
    ["Alignment of _fpreg"][::std::mem::align_of::<_fpreg>() - 2usize];
    ["Offset of field: _fpreg::significand"][::std::mem::offset_of!(_fpreg, significand) - 0usize];
    ["Offset of field: _fpreg::exponent"][::std::mem::offset_of!(_fpreg, exponent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpxreg"][::std::mem::size_of::<_fpxreg>() - 16usize];
    ["Alignment of _fpxreg"][::std::mem::align_of::<_fpxreg>() - 2usize];
    ["Offset of field: _fpxreg::significand"]
        [::std::mem::offset_of!(_fpxreg, significand) - 0usize];
    ["Offset of field: _fpxreg::exponent"][::std::mem::offset_of!(_fpxreg, exponent) - 8usize];
    ["Offset of field: _fpxreg::__glibc_reserved1"]
        [::std::mem::offset_of!(_fpxreg, __glibc_reserved1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmmreg"][::std::mem::size_of::<_xmmreg>() - 16usize];
    ["Alignment of _xmmreg"][::std::mem::align_of::<_xmmreg>() - 4usize];
    ["Offset of field: _xmmreg::element"][::std::mem::offset_of!(_xmmreg, element) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpstate"][::std::mem::size_of::<_fpstate>() - 512usize];
    ["Alignment of _fpstate"][::std::mem::align_of::<_fpstate>() - 8usize];
    ["Offset of field: _fpstate::cwd"][::std::mem::offset_of!(_fpstate, cwd) - 0usize];
    ["Offset of field: _fpstate::swd"][::std::mem::offset_of!(_fpstate, swd) - 2usize];
    ["Offset of field: _fpstate::ftw"][::std::mem::offset_of!(_fpstate, ftw) - 4usize];
    ["Offset of field: _fpstate::fop"][::std::mem::offset_of!(_fpstate, fop) - 6usize];
    ["Offset of field: _fpstate::rip"][::std::mem::offset_of!(_fpstate, rip) - 8usize];
    ["Offset of field: _fpstate::rdp"][::std::mem::offset_of!(_fpstate, rdp) - 16usize];
    ["Offset of field: _fpstate::mxcsr"][::std::mem::offset_of!(_fpstate, mxcsr) - 24usize];
    ["Offset of field: _fpstate::mxcr_mask"][::std::mem::offset_of!(_fpstate, mxcr_mask) - 28usize];
    ["Offset of field: _fpstate::_st"][::std::mem::offset_of!(_fpstate, _st) - 32usize];
    ["Offset of field: _fpstate::_xmm"][::std::mem::offset_of!(_fpstate, _xmm) - 160usize];
    ["Offset of field: _fpstate::__glibc_reserved1"]
        [::std::mem::offset_of!(_fpstate, __glibc_reserved1) - 416usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigcontext__bindgen_ty_1"]
        [::std::mem::size_of::<sigcontext__bindgen_ty_1>() - 8usize];
    ["Alignment of sigcontext__bindgen_ty_1"]
        [::std::mem::align_of::<sigcontext__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigcontext__bindgen_ty_1::fpstate"]
        [::std::mem::offset_of!(sigcontext__bindgen_ty_1, fpstate) - 0usize];
    ["Offset of field: sigcontext__bindgen_ty_1::__fpstate_word"]
        [::std::mem::offset_of!(sigcontext__bindgen_ty_1, __fpstate_word) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigcontext"][::std::mem::size_of::<sigcontext>() - 256usize];
    ["Alignment of sigcontext"][::std::mem::align_of::<sigcontext>() - 8usize];
    ["Offset of field: sigcontext::r8"][::std::mem::offset_of!(sigcontext, r8) - 0usize];
    ["Offset of field: sigcontext::r9"][::std::mem::offset_of!(sigcontext, r9) - 8usize];
    ["Offset of field: sigcontext::r10"][::std::mem::offset_of!(sigcontext, r10) - 16usize];
    ["Offset of field: sigcontext::r11"][::std::mem::offset_of!(sigcontext, r11) - 24usize];
    ["Offset of field: sigcontext::r12"][::std::mem::offset_of!(sigcontext, r12) - 32usize];
    ["Offset of field: sigcontext::r13"][::std::mem::offset_of!(sigcontext, r13) - 40usize];
    ["Offset of field: sigcontext::r14"][::std::mem::offset_of!(sigcontext, r14) - 48usize];
    ["Offset of field: sigcontext::r15"][::std::mem::offset_of!(sigcontext, r15) - 56usize];
    ["Offset of field: sigcontext::rdi"][::std::mem::offset_of!(sigcontext, rdi) - 64usize];
    ["Offset of field: sigcontext::rsi"][::std::mem::offset_of!(sigcontext, rsi) - 72usize];
    ["Offset of field: sigcontext::rbp"][::std::mem::offset_of!(sigcontext, rbp) - 80usize];
    ["Offset of field: sigcontext::rbx"][::std::mem::offset_of!(sigcontext, rbx) - 88usize];
    ["Offset of field: sigcontext::rdx"][::std::mem::offset_of!(sigcontext, rdx) - 96usize];
    ["Offset of field: sigcontext::rax"][::std::mem::offset_of!(sigcontext, rax) - 104usize];
    ["Offset of field: sigcontext::rcx"][::std::mem::offset_of!(sigcontext, rcx) - 112usize];
    ["Offset of field: sigcontext::rsp"][::std::mem::offset_of!(sigcontext, rsp) - 120usize];
    ["Offset of field: sigcontext::rip"][::std::mem::offset_of!(sigcontext, rip) - 128usize];
    ["Offset of field: sigcontext::eflags"][::std::mem::offset_of!(sigcontext, eflags) - 136usize];
    ["Offset of field: sigcontext::cs"][::std::mem::offset_of!(sigcontext, cs) - 144usize];
    ["Offset of field: sigcontext::gs"][::std::mem::offset_of!(sigcontext, gs) - 146usize];
    ["Offset of field: sigcontext::fs"][::std::mem::offset_of!(sigcontext, fs) - 148usize];
    ["Offset of field: sigcontext::__pad0"][::std::mem::offset_of!(sigcontext, __pad0) - 150usize];
    ["Offset of field: sigcontext::err"][::std::mem::offset_of!(sigcontext, err) - 152usize];
    ["Offset of field: sigcontext::trapno"][::std::mem::offset_of!(sigcontext, trapno) - 160usize];
    ["Offset of field: sigcontext::oldmask"]
        [::std::mem::offset_of!(sigcontext, oldmask) - 168usize];
    ["Offset of field: sigcontext::cr2"][::std::mem::offset_of!(sigcontext, cr2) - 176usize];
    ["Offset of field: sigcontext::__reserved1"]
        [::std::mem::offset_of!(sigcontext, __reserved1) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xsave_hdr"][::std::mem::size_of::<_xsave_hdr>() - 64usize];
    ["Alignment of _xsave_hdr"][::std::mem::align_of::<_xsave_hdr>() - 8usize];
    ["Offset of field: _xsave_hdr::xstate_bv"]
        [::std::mem::offset_of!(_xsave_hdr, xstate_bv) - 0usize];
    ["Offset of field: _xsave_hdr::__glibc_reserved1"]
        [::std::mem::offset_of!(_xsave_hdr, __glibc_reserved1) - 8usize];
    ["Offset of field: _xsave_hdr::__glibc_reserved2"]
        [::std::mem::offset_of!(_xsave_hdr, __glibc_reserved2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ymmh_state"][::std::mem::size_of::<_ymmh_state>() - 256usize];
    ["Alignment of _ymmh_state"][::std::mem::align_of::<_ymmh_state>() - 4usize];
    ["Offset of field: _ymmh_state::ymmh_space"]
        [::std::mem::offset_of!(_ymmh_state, ymmh_space) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xstate"][::std::mem::size_of::<_xstate>() - 832usize];
    ["Alignment of _xstate"][::std::mem::align_of::<_xstate>() - 8usize];
    ["Offset of field: _xstate::fpstate"][::std::mem::offset_of!(_xstate, fpstate) - 0usize];
    ["Offset of field: _xstate::xstate_hdr"]
        [::std::mem::offset_of!(_xstate, xstate_hdr) - 512usize];
    ["Offset of field: _xstate::ymmh"][::std::mem::offset_of!(_xstate, ymmh) - 576usize];
};
unsafe extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stack_t"][::std::mem::size_of::<stack_t>() - 24usize];
    ["Alignment of stack_t"][::std::mem::align_of::<stack_t>() - 8usize];
    ["Offset of field: stack_t::ss_sp"][::std::mem::offset_of!(stack_t, ss_sp) - 0usize];
    ["Offset of field: stack_t::ss_flags"][::std::mem::offset_of!(stack_t, ss_flags) - 8usize];
    ["Offset of field: stack_t::ss_size"][::std::mem::offset_of!(stack_t, ss_size) - 16usize];
};
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _libc_fpxreg"][::std::mem::size_of::<_libc_fpxreg>() - 16usize];
    ["Alignment of _libc_fpxreg"][::std::mem::align_of::<_libc_fpxreg>() - 2usize];
    ["Offset of field: _libc_fpxreg::significand"]
        [::std::mem::offset_of!(_libc_fpxreg, significand) - 0usize];
    ["Offset of field: _libc_fpxreg::exponent"]
        [::std::mem::offset_of!(_libc_fpxreg, exponent) - 8usize];
    ["Offset of field: _libc_fpxreg::__glibc_reserved1"]
        [::std::mem::offset_of!(_libc_fpxreg, __glibc_reserved1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _libc_xmmreg"][::std::mem::size_of::<_libc_xmmreg>() - 16usize];
    ["Alignment of _libc_xmmreg"][::std::mem::align_of::<_libc_xmmreg>() - 4usize];
    ["Offset of field: _libc_xmmreg::element"]
        [::std::mem::offset_of!(_libc_xmmreg, element) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _libc_fpstate"][::std::mem::size_of::<_libc_fpstate>() - 512usize];
    ["Alignment of _libc_fpstate"][::std::mem::align_of::<_libc_fpstate>() - 8usize];
    ["Offset of field: _libc_fpstate::cwd"][::std::mem::offset_of!(_libc_fpstate, cwd) - 0usize];
    ["Offset of field: _libc_fpstate::swd"][::std::mem::offset_of!(_libc_fpstate, swd) - 2usize];
    ["Offset of field: _libc_fpstate::ftw"][::std::mem::offset_of!(_libc_fpstate, ftw) - 4usize];
    ["Offset of field: _libc_fpstate::fop"][::std::mem::offset_of!(_libc_fpstate, fop) - 6usize];
    ["Offset of field: _libc_fpstate::rip"][::std::mem::offset_of!(_libc_fpstate, rip) - 8usize];
    ["Offset of field: _libc_fpstate::rdp"][::std::mem::offset_of!(_libc_fpstate, rdp) - 16usize];
    ["Offset of field: _libc_fpstate::mxcsr"]
        [::std::mem::offset_of!(_libc_fpstate, mxcsr) - 24usize];
    ["Offset of field: _libc_fpstate::mxcr_mask"]
        [::std::mem::offset_of!(_libc_fpstate, mxcr_mask) - 28usize];
    ["Offset of field: _libc_fpstate::_st"][::std::mem::offset_of!(_libc_fpstate, _st) - 32usize];
    ["Offset of field: _libc_fpstate::_xmm"]
        [::std::mem::offset_of!(_libc_fpstate, _xmm) - 160usize];
    ["Offset of field: _libc_fpstate::__glibc_reserved1"]
        [::std::mem::offset_of!(_libc_fpstate, __glibc_reserved1) - 416usize];
};
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcontext_t"][::std::mem::size_of::<mcontext_t>() - 256usize];
    ["Alignment of mcontext_t"][::std::mem::align_of::<mcontext_t>() - 8usize];
    ["Offset of field: mcontext_t::gregs"][::std::mem::offset_of!(mcontext_t, gregs) - 0usize];
    ["Offset of field: mcontext_t::fpregs"][::std::mem::offset_of!(mcontext_t, fpregs) - 184usize];
    ["Offset of field: mcontext_t::__reserved1"]
        [::std::mem::offset_of!(mcontext_t, __reserved1) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ucontext_t"][::std::mem::size_of::<ucontext_t>() - 968usize];
    ["Alignment of ucontext_t"][::std::mem::align_of::<ucontext_t>() - 8usize];
    ["Offset of field: ucontext_t::uc_flags"]
        [::std::mem::offset_of!(ucontext_t, uc_flags) - 0usize];
    ["Offset of field: ucontext_t::uc_link"][::std::mem::offset_of!(ucontext_t, uc_link) - 8usize];
    ["Offset of field: ucontext_t::uc_stack"]
        [::std::mem::offset_of!(ucontext_t, uc_stack) - 16usize];
    ["Offset of field: ucontext_t::uc_mcontext"]
        [::std::mem::offset_of!(ucontext_t, uc_mcontext) - 40usize];
    ["Offset of field: ucontext_t::uc_sigmask"]
        [::std::mem::offset_of!(ucontext_t, uc_sigmask) - 296usize];
    ["Offset of field: ucontext_t::__fpregs_mem"]
        [::std::mem::offset_of!(ucontext_t, __fpregs_mem) - 424usize];
    ["Offset of field: ucontext_t::__ssp"][::std::mem::offset_of!(ucontext_t, __ssp) - 936usize];
};
unsafe extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_9 = 1;
pub const SS_DISABLE: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_10 = 0;
pub const FP_INFINITE: _bindgen_ty_10 = 1;
pub const FP_ZERO: _bindgen_ty_10 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_10 = 3;
pub const FP_NORMAL: _bindgen_ty_10 = 4;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct point {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of point"][::std::mem::size_of::<point>() - 8usize];
    ["Alignment of point"][::std::mem::align_of::<point>() - 4usize];
    ["Offset of field: point::x"][::std::mem::offset_of!(point, x) - 0usize];
    ["Offset of field: point::y"][::std::mem::offset_of!(point, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pointf_s {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pointf_s"][::std::mem::size_of::<pointf_s>() - 16usize];
    ["Alignment of pointf_s"][::std::mem::align_of::<pointf_s>() - 8usize];
    ["Offset of field: pointf_s::x"][::std::mem::offset_of!(pointf_s, x) - 0usize];
    ["Offset of field: pointf_s::y"][::std::mem::offset_of!(pointf_s, y) - 8usize];
};
pub type pointf = pointf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linef {
    pub p: pointf,
    pub m: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linef"][::std::mem::size_of::<linef>() - 24usize];
    ["Alignment of linef"][::std::mem::align_of::<linef>() - 8usize];
    ["Offset of field: linef::p"][::std::mem::offset_of!(linef, p) - 0usize];
    ["Offset of field: linef::m"][::std::mem::offset_of!(linef, m) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct box_ {
    pub LL: point,
    pub UR: point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of box_"][::std::mem::size_of::<box_>() - 16usize];
    ["Alignment of box_"][::std::mem::align_of::<box_>() - 4usize];
    ["Offset of field: box_::LL"][::std::mem::offset_of!(box_, LL) - 0usize];
    ["Offset of field: box_::UR"][::std::mem::offset_of!(box_, UR) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct boxf {
    pub LL: pointf,
    pub UR: pointf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of boxf"][::std::mem::size_of::<boxf>() - 32usize];
    ["Alignment of boxf"][::std::mem::align_of::<boxf>() - 8usize];
    ["Offset of field: boxf::LL"][::std::mem::offset_of!(boxf, LL) - 0usize];
    ["Offset of field: boxf::UR"][::std::mem::offset_of!(boxf, UR) - 16usize];
};
pub const api_t_API_render: api_t = 0;
pub const api_t_API_layout: api_t = 1;
pub const api_t_API_textlayout: api_t = 2;
pub const api_t_API_device: api_t = 3;
pub const api_t_API_loadimage: api_t = 4;
pub type api_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GVJ_s {
    _unused: [u8; 0],
}
pub type GVJ_t = GVJ_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GVG_s {
    _unused: [u8; 0],
}
pub type GVG_t = GVG_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GVC_s {
    _unused: [u8; 0],
}
pub type GVC_t = GVC_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lt_symlist_t {
    pub name: *const ::std::os::raw::c_char,
    pub address: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lt_symlist_t"][::std::mem::size_of::<lt_symlist_t>() - 16usize];
    ["Alignment of lt_symlist_t"][::std::mem::align_of::<lt_symlist_t>() - 8usize];
    ["Offset of field: lt_symlist_t::name"][::std::mem::offset_of!(lt_symlist_t, name) - 0usize];
    ["Offset of field: lt_symlist_t::address"]
        [::std::mem::offset_of!(lt_symlist_t, address) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gvplugin_available_s {
    _unused: [u8; 0],
}
pub type gvplugin_available_t = gvplugin_available_s;
unsafe extern "C" {
    pub static mut lt_preloaded_symbols: [lt_symlist_t; 0usize];
}
pub type Ppoint_t = pointf_s;
pub type Pvector_t = pointf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ppoly_t {
    pub ps: *mut Ppoint_t,
    pub pn: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Ppoly_t"][::std::mem::size_of::<Ppoly_t>() - 16usize];
    ["Alignment of Ppoly_t"][::std::mem::align_of::<Ppoly_t>() - 8usize];
    ["Offset of field: Ppoly_t::ps"][::std::mem::offset_of!(Ppoly_t, ps) - 0usize];
    ["Offset of field: Ppoly_t::pn"][::std::mem::offset_of!(Ppoly_t, pn) - 8usize];
};
pub type Ppolyline_t = Ppoly_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pedge_t {
    pub a: Ppoint_t,
    pub b: Ppoint_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pedge_t"][::std::mem::size_of::<Pedge_t>() - 32usize];
    ["Alignment of Pedge_t"][::std::mem::align_of::<Pedge_t>() - 8usize];
    ["Offset of field: Pedge_t::a"][::std::mem::offset_of!(Pedge_t, a) - 0usize];
    ["Offset of field: Pedge_t::b"][::std::mem::offset_of!(Pedge_t, b) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vconfig_s {
    _unused: [u8; 0],
}
pub type vconfig_t = vconfig_s;
unsafe extern "C" {
    pub fn freePath(p: *mut Ppolyline_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PostscriptAlias {
    pub name: *mut ::std::os::raw::c_char,
    pub family: *mut ::std::os::raw::c_char,
    pub weight: *mut ::std::os::raw::c_char,
    pub stretch: *mut ::std::os::raw::c_char,
    pub style: *mut ::std::os::raw::c_char,
    pub xfig_code: ::std::os::raw::c_int,
    pub svg_font_family: *mut ::std::os::raw::c_char,
    pub svg_font_weight: *mut ::std::os::raw::c_char,
    pub svg_font_style: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PostscriptAlias"][::std::mem::size_of::<_PostscriptAlias>() - 72usize];
    ["Alignment of _PostscriptAlias"][::std::mem::align_of::<_PostscriptAlias>() - 8usize];
    ["Offset of field: _PostscriptAlias::name"]
        [::std::mem::offset_of!(_PostscriptAlias, name) - 0usize];
    ["Offset of field: _PostscriptAlias::family"]
        [::std::mem::offset_of!(_PostscriptAlias, family) - 8usize];
    ["Offset of field: _PostscriptAlias::weight"]
        [::std::mem::offset_of!(_PostscriptAlias, weight) - 16usize];
    ["Offset of field: _PostscriptAlias::stretch"]
        [::std::mem::offset_of!(_PostscriptAlias, stretch) - 24usize];
    ["Offset of field: _PostscriptAlias::style"]
        [::std::mem::offset_of!(_PostscriptAlias, style) - 32usize];
    ["Offset of field: _PostscriptAlias::xfig_code"]
        [::std::mem::offset_of!(_PostscriptAlias, xfig_code) - 40usize];
    ["Offset of field: _PostscriptAlias::svg_font_family"]
        [::std::mem::offset_of!(_PostscriptAlias, svg_font_family) - 48usize];
    ["Offset of field: _PostscriptAlias::svg_font_weight"]
        [::std::mem::offset_of!(_PostscriptAlias, svg_font_weight) - 56usize];
    ["Offset of field: _PostscriptAlias::svg_font_style"]
        [::std::mem::offset_of!(_PostscriptAlias, svg_font_style) - 64usize];
};
pub type PostscriptAlias = _PostscriptAlias;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct textfont_t {
    pub name: *mut ::std::os::raw::c_char,
    pub color: *mut ::std::os::raw::c_char,
    pub postscript_alias: *mut PostscriptAlias,
    pub size: f64,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of textfont_t"][::std::mem::size_of::<textfont_t>() - 40usize];
    ["Alignment of textfont_t"][::std::mem::align_of::<textfont_t>() - 8usize];
    ["Offset of field: textfont_t::name"][::std::mem::offset_of!(textfont_t, name) - 0usize];
    ["Offset of field: textfont_t::color"][::std::mem::offset_of!(textfont_t, color) - 8usize];
    ["Offset of field: textfont_t::postscript_alias"]
        [::std::mem::offset_of!(textfont_t, postscript_alias) - 16usize];
    ["Offset of field: textfont_t::size"][::std::mem::offset_of!(textfont_t, size) - 24usize];
};
impl textfont_t {
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cnt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_cnt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cnt_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                25u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cnt_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                25u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: ::std::os::raw::c_uint,
        cnt: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let cnt: u32 = unsafe { ::std::mem::transmute(cnt) };
            cnt as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct textspan_t {
    pub str_: *mut ::std::os::raw::c_char,
    pub font: *mut textfont_t,
    pub layout: *mut ::std::os::raw::c_void,
    pub free_layout:
        ::std::option::Option<unsafe extern "C" fn(layout: *mut ::std::os::raw::c_void)>,
    pub yoffset_layout: f64,
    pub yoffset_centerline: f64,
    pub size: pointf,
    #[doc = "< 'l' 'n' 'r'"]
    pub just: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of textspan_t"][::std::mem::size_of::<textspan_t>() - 72usize];
    ["Alignment of textspan_t"][::std::mem::align_of::<textspan_t>() - 8usize];
    ["Offset of field: textspan_t::str_"][::std::mem::offset_of!(textspan_t, str_) - 0usize];
    ["Offset of field: textspan_t::font"][::std::mem::offset_of!(textspan_t, font) - 8usize];
    ["Offset of field: textspan_t::layout"][::std::mem::offset_of!(textspan_t, layout) - 16usize];
    ["Offset of field: textspan_t::free_layout"]
        [::std::mem::offset_of!(textspan_t, free_layout) - 24usize];
    ["Offset of field: textspan_t::yoffset_layout"]
        [::std::mem::offset_of!(textspan_t, yoffset_layout) - 32usize];
    ["Offset of field: textspan_t::yoffset_centerline"]
        [::std::mem::offset_of!(textspan_t, yoffset_centerline) - 40usize];
    ["Offset of field: textspan_t::size"][::std::mem::offset_of!(textspan_t, size) - 48usize];
    ["Offset of field: textspan_t::just"][::std::mem::offset_of!(textspan_t, just) - 64usize];
};
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
unsafe extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
pub type Dtlink_t = dtlink_s_;
pub type Dtdisc_t = dtdisc_s_;
pub type Dt_t = dt_s_;
pub type Dict_t = dt_s_;
pub type Dtsearch_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Dt_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type Dtmake_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut Dtdisc_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type Dtfree_f = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type Dtcompar_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dtlink_s_ {
    pub right: *mut Dtlink_t,
    pub hl: dtlink_s___bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dtlink_s___bindgen_ty_1 {
    pub _hash: ::std::os::raw::c_uint,
    pub _left: *mut Dtlink_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtlink_s___bindgen_ty_1"][::std::mem::size_of::<dtlink_s___bindgen_ty_1>() - 8usize];
    ["Alignment of dtlink_s___bindgen_ty_1"]
        [::std::mem::align_of::<dtlink_s___bindgen_ty_1>() - 8usize];
    ["Offset of field: dtlink_s___bindgen_ty_1::_hash"]
        [::std::mem::offset_of!(dtlink_s___bindgen_ty_1, _hash) - 0usize];
    ["Offset of field: dtlink_s___bindgen_ty_1::_left"]
        [::std::mem::offset_of!(dtlink_s___bindgen_ty_1, _left) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtlink_s_"][::std::mem::size_of::<dtlink_s_>() - 16usize];
    ["Alignment of dtlink_s_"][::std::mem::align_of::<dtlink_s_>() - 8usize];
    ["Offset of field: dtlink_s_::right"][::std::mem::offset_of!(dtlink_s_, right) - 0usize];
    ["Offset of field: dtlink_s_::hl"][::std::mem::offset_of!(dtlink_s_, hl) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Dthold_t {
    pub hdr: Dtlink_t,
    pub obj: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dthold_t"][::std::mem::size_of::<Dthold_t>() - 24usize];
    ["Alignment of Dthold_t"][::std::mem::align_of::<Dthold_t>() - 8usize];
    ["Offset of field: Dthold_t::hdr"][::std::mem::offset_of!(Dthold_t, hdr) - 0usize];
    ["Offset of field: Dthold_t::obj"][::std::mem::offset_of!(Dthold_t, obj) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dtmethod_t {
    pub searchf: Dtsearch_f,
    pub type_: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dtmethod_t"][::std::mem::size_of::<Dtmethod_t>() - 16usize];
    ["Alignment of Dtmethod_t"][::std::mem::align_of::<Dtmethod_t>() - 8usize];
    ["Offset of field: Dtmethod_t::searchf"][::std::mem::offset_of!(Dtmethod_t, searchf) - 0usize];
    ["Offset of field: Dtmethod_t::type_"][::std::mem::offset_of!(Dtmethod_t, type_) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Dtdata_t {
    pub type_: ::std::os::raw::c_int,
    pub here: *mut Dtlink_t,
    pub hh: Dtdata_t__bindgen_ty_1,
    pub ntab: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub loop_: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Dtdata_t__bindgen_ty_1 {
    pub _htab: *mut *mut Dtlink_t,
    pub _head: *mut Dtlink_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dtdata_t__bindgen_ty_1"][::std::mem::size_of::<Dtdata_t__bindgen_ty_1>() - 8usize];
    ["Alignment of Dtdata_t__bindgen_ty_1"]
        [::std::mem::align_of::<Dtdata_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: Dtdata_t__bindgen_ty_1::_htab"]
        [::std::mem::offset_of!(Dtdata_t__bindgen_ty_1, _htab) - 0usize];
    ["Offset of field: Dtdata_t__bindgen_ty_1::_head"]
        [::std::mem::offset_of!(Dtdata_t__bindgen_ty_1, _head) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dtdata_t"][::std::mem::size_of::<Dtdata_t>() - 40usize];
    ["Alignment of Dtdata_t"][::std::mem::align_of::<Dtdata_t>() - 8usize];
    ["Offset of field: Dtdata_t::type_"][::std::mem::offset_of!(Dtdata_t, type_) - 0usize];
    ["Offset of field: Dtdata_t::here"][::std::mem::offset_of!(Dtdata_t, here) - 8usize];
    ["Offset of field: Dtdata_t::hh"][::std::mem::offset_of!(Dtdata_t, hh) - 16usize];
    ["Offset of field: Dtdata_t::ntab"][::std::mem::offset_of!(Dtdata_t, ntab) - 24usize];
    ["Offset of field: Dtdata_t::size"][::std::mem::offset_of!(Dtdata_t, size) - 28usize];
    ["Offset of field: Dtdata_t::loop_"][::std::mem::offset_of!(Dtdata_t, loop_) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtdisc_s_ {
    pub key: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub link: ::std::os::raw::c_int,
    pub makef: Dtmake_f,
    pub freef: Dtfree_f,
    pub comparf: Dtcompar_f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtdisc_s_"][::std::mem::size_of::<dtdisc_s_>() - 40usize];
    ["Alignment of dtdisc_s_"][::std::mem::align_of::<dtdisc_s_>() - 8usize];
    ["Offset of field: dtdisc_s_::key"][::std::mem::offset_of!(dtdisc_s_, key) - 0usize];
    ["Offset of field: dtdisc_s_::size"][::std::mem::offset_of!(dtdisc_s_, size) - 4usize];
    ["Offset of field: dtdisc_s_::link"][::std::mem::offset_of!(dtdisc_s_, link) - 8usize];
    ["Offset of field: dtdisc_s_::makef"][::std::mem::offset_of!(dtdisc_s_, makef) - 16usize];
    ["Offset of field: dtdisc_s_::freef"][::std::mem::offset_of!(dtdisc_s_, freef) - 24usize];
    ["Offset of field: dtdisc_s_::comparf"][::std::mem::offset_of!(dtdisc_s_, comparf) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dt_s_ {
    pub searchf: Dtsearch_f,
    pub disc: *mut Dtdisc_t,
    #[doc = "< sharable data"]
    pub data: Dtdata_t,
    pub meth: *mut Dtmethod_t,
    pub nview: ::std::os::raw::c_int,
    pub view: *mut Dt_t,
    pub walk: *mut Dt_t,
    pub user: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dt_s_"][::std::mem::size_of::<dt_s_>() - 96usize];
    ["Alignment of dt_s_"][::std::mem::align_of::<dt_s_>() - 8usize];
    ["Offset of field: dt_s_::searchf"][::std::mem::offset_of!(dt_s_, searchf) - 0usize];
    ["Offset of field: dt_s_::disc"][::std::mem::offset_of!(dt_s_, disc) - 8usize];
    ["Offset of field: dt_s_::data"][::std::mem::offset_of!(dt_s_, data) - 16usize];
    ["Offset of field: dt_s_::meth"][::std::mem::offset_of!(dt_s_, meth) - 56usize];
    ["Offset of field: dt_s_::nview"][::std::mem::offset_of!(dt_s_, nview) - 64usize];
    ["Offset of field: dt_s_::view"][::std::mem::offset_of!(dt_s_, view) - 72usize];
    ["Offset of field: dt_s_::walk"][::std::mem::offset_of!(dt_s_, walk) - 80usize];
    ["Offset of field: dt_s_::user"][::std::mem::offset_of!(dt_s_, user) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dtstat_t {
    pub dt_meth: ::std::os::raw::c_int,
    pub dt_size: ::std::os::raw::c_int,
    pub dt_n: usize,
    pub dt_max: usize,
    pub dt_count: *mut usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dtstat_t"][::std::mem::size_of::<Dtstat_t>() - 32usize];
    ["Alignment of Dtstat_t"][::std::mem::align_of::<Dtstat_t>() - 8usize];
    ["Offset of field: Dtstat_t::dt_meth"][::std::mem::offset_of!(Dtstat_t, dt_meth) - 0usize];
    ["Offset of field: Dtstat_t::dt_size"][::std::mem::offset_of!(Dtstat_t, dt_size) - 4usize];
    ["Offset of field: Dtstat_t::dt_n"][::std::mem::offset_of!(Dtstat_t, dt_n) - 8usize];
    ["Offset of field: Dtstat_t::dt_max"][::std::mem::offset_of!(Dtstat_t, dt_max) - 16usize];
    ["Offset of field: Dtstat_t::dt_count"][::std::mem::offset_of!(Dtstat_t, dt_count) - 24usize];
};
unsafe extern "C" {
    #[doc = "< set with unique elements"]
    pub static mut Dtset: *mut Dtmethod_t;
}
unsafe extern "C" {
    #[doc = "< ordered set (self-adjusting tree)"]
    pub static mut Dtoset: *mut Dtmethod_t;
}
unsafe extern "C" {
    #[doc = "< ordered multiset"]
    pub static mut Dtobag: *mut Dtmethod_t;
}
unsafe extern "C" {
    pub static mut Dttree: *mut Dtmethod_t;
}
unsafe extern "C" {
    pub fn dtopen(arg1: *mut Dtdisc_t, arg2: *mut Dtmethod_t) -> *mut Dt_t;
}
unsafe extern "C" {
    pub fn dtclose(arg1: *mut Dt_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dtview(arg1: *mut Dt_t, arg2: *mut Dt_t) -> *mut Dt_t;
}
unsafe extern "C" {
    pub fn dtdisc(dt: *mut Dt_t, arg1: *mut Dtdisc_t) -> *mut Dtdisc_t;
}
unsafe extern "C" {
    pub fn dtmethod(arg1: *mut Dt_t, arg2: *mut Dtmethod_t) -> *mut Dtmethod_t;
}
unsafe extern "C" {
    pub fn dtflatten(arg1: *mut Dt_t) -> *mut Dtlink_t;
}
unsafe extern "C" {
    pub fn dtextract(arg1: *mut Dt_t) -> *mut Dtlink_t;
}
unsafe extern "C" {
    pub fn dtrestore(arg1: *mut Dt_t, arg2: *mut Dtlink_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dtwalk(
        arg1: *mut Dt_t,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dtrenew(
        arg1: *mut Dt_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn dtsize(arg1: *mut Dt_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dtstat(
        arg1: *mut Dt_t,
        arg2: *mut Dtstat_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dtstrhash(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[doc = " @addtogroup cgraph_object\n @{"]
pub type IDTYPE = u64;
#[doc = " @brief tag in @ref Agobj_s for graphs, nodes, and edges.\n\nWhile there may be several structs\nfor a given node or edges, there is only one unique ID (per main graph)."]
pub type Agtag_t = Agtag_s;
#[doc = " a generic header of @ref Agraph_s, @ref Agnode_s and @ref Agedge_s"]
pub type Agobj_t = Agobj_s;
#[doc = " @}\n @addtogroup cgraph_graph\n @{"]
pub type Agraph_t = Agraph_s;
#[doc = " graph descriptor"]
pub type Agdesc_t = Agdesc_s;
#[doc = " client state (closures)"]
pub type Agdstate_t = Agdstate_s;
#[doc = " shared resources for Agraph_s"]
pub type Agclos_t = Agclos_s;
#[doc = " @}\n @addtogroup cgraph_node\n @{"]
pub type Agnode_t = Agnode_s;
#[doc = " @brief This is the node struct allocated per graph (or subgraph).\n\nIt resides in the n_dict of the graph.\nThe node set is maintained by libcdt, but transparently to libgraph callers.\nEvery node may be given an optional string name at its time of creation,\nor it is permissible to pass NULL for the name."]
pub type Agsubnode_t = Agsubnode_s;
#[doc = " @}\n @addtogroup cgraph_edge\n @{"]
pub type Agedge_t = Agedge_s;
pub type Agedgepair_t = Agedgepair_s;
#[doc = " @}\n @addtogroup cgraph_disc\n @{"]
pub type Agiddisc_t = Agiddisc_s;
#[doc = " IO services"]
pub type Agiodisc_t = Agiodisc_s;
#[doc = " @brief user's discipline\n\n A default discipline is supplied when NULL is given for any of these fields."]
pub type Agdisc_t = Agdisc_s;
#[doc = " @}\n @addtogroup cgraph_callback\n @{"]
pub type Agcbdisc_t = Agcbdisc_s;
#[doc = " enclosing state for Agcbdisc_s, used in Agclos_s"]
pub type Agcbstack_t = Agcbstack_s;
#[doc = " @addtogroup cgraph_attr\n  @{\n\n  @defgroup cgraph_rec records\n  @brief These records are attached by client programs dynamically at runtime.\n  @{\n\n  Uninterpreted records may be attached to graphs, subgraphs, nodes,\n  and edges for efficient operations on values such as marks, weights,\n  counts, and pointers needed by algorithms.\n  Application programmers define the fields of these records,\n  but they must be declared with a common record header @ref Agrec_t.\n\n  A unique string ID (stored in @ref Agrec_s.name) must be given\n  to each record attached to the same object.\n  Cgraph has functions to create, search for, and delete these records.\n  The records are maintained in a circular list,\n  with @ref Agobj_s.data pointing somewhere in the list.\n  The search function @ref aggetrec has an option to lock this pointer on a\n given record. The application must be written so only one such lock is\n outstanding at a time.\n\n  Records are created and managed by Libcgraph.\n  A programmer must explicitly attach them to the objects in a graph,\n  either to individual objects one at a time via @ref agbindrec,\n  or to all the objects of the same class in a graph via @ref aginit.\n  The `name` argument of a record distinguishes various types of records,\n  and is programmer defined.\n\n  Libcgraph reserves the prefix \"_AG_\" (in\n  @ref DataDictName,\n  @ref AgDataRecName,\n  @ref DRName).\n\n  Internally, records Agrec_s are maintained in circular linked lists\n  attached to graph objects Agobj_s.\n  To allow referencing application-dependent data without function calls or\n search, Libcgraph allows setting and locking the list pointer of a graph,\n node, or edge on a particular record (see @ref Agtag_s.mtflock and @ref\n Agobj_s.data). This pointer can be obtained with the macro @ref AGDATA(obj).\n  A cast, generally within a macro or inline function,\n  is usually applied to convert the list pointer to\n  an appropriate programmer-defined type (eg. @ref GD_parent).\n\n  To control the setting of this pointer,\n  the `move_to_front` flag may be TRUE or FALSE.\n  If `move_to_front` is TRUE, the record will be\n  locked @ref Agtag_s.mtflock at the\n  head of the list @ref Agobj_s.data,\n  so it can be accessed directly by @ref AGDATA(obj).\n\n  The lock protects the data pointer from being moved.\n  Function @ref aggetrec reports error when data pointer and lock\n  are reassigned.\n\n  The lock can be released or reset by a call to @ref agdelrec.\n"]
pub type Agsym_t = Agsym_s;
#[doc = " string attribute container"]
pub type Agattr_t = Agattr_s;
pub type Agdatadict_t = Agdatadict_s;
#[doc = " implementation of @ref Agrec_t"]
pub type Agrec_t = Agrec_s;
#[doc = " implementation of @ref Agrec_t"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agrec_s {
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< **circular** linked list of records"]
    pub next: *mut Agrec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agrec_s"][::std::mem::size_of::<Agrec_s>() - 16usize];
    ["Alignment of Agrec_s"][::std::mem::align_of::<Agrec_s>() - 8usize];
    ["Offset of field: Agrec_s::name"][::std::mem::offset_of!(Agrec_s, name) - 0usize];
    ["Offset of field: Agrec_s::next"][::std::mem::offset_of!(Agrec_s, next) - 8usize];
};
#[doc = " @brief tag in @ref Agobj_s for graphs, nodes, and edges.\n\nWhile there may be several structs\nfor a given node or edges, there is only one unique ID (per main graph)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agtag_s {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub id: IDTYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agtag_s"][::std::mem::size_of::<Agtag_s>() - 16usize];
    ["Alignment of Agtag_s"][::std::mem::align_of::<Agtag_s>() - 8usize];
    ["Offset of field: Agtag_s::id"][::std::mem::offset_of!(Agtag_s, id) - 8usize];
};
impl Agtag_s {
    #[inline]
    pub fn objtype(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_objtype(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn objtype_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_objtype_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mtflock(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mtflock(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mtflock_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mtflock_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn attrwf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_attrwf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn attrwf_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_attrwf_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn seq(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_seq(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn seq_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_seq_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        objtype: ::std::os::raw::c_uint,
        mtflock: ::std::os::raw::c_uint,
        attrwf: ::std::os::raw::c_uint,
        seq: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let objtype: u32 = unsafe { ::std::mem::transmute(objtype) };
            objtype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mtflock: u32 = unsafe { ::std::mem::transmute(mtflock) };
            mtflock as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let attrwf: u32 = unsafe { ::std::mem::transmute(attrwf) };
            attrwf as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let seq: u32 = unsafe { ::std::mem::transmute(seq) };
            seq as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const AGRAPH: _bindgen_ty_11 = 0;
pub const AGNODE: _bindgen_ty_11 = 1;
pub const AGEDGE: _bindgen_ty_11 = 2;
pub const AGOUTEDGE: _bindgen_ty_11 = 2;
pub const AGINEDGE: _bindgen_ty_11 = 3;
#[doc = " Object tags. Can't exceed 2 bits. See Agtag_s."]
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[doc = " a generic header of @ref Agraph_s, @ref Agnode_s and @ref Agedge_s"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agobj_s {
    #[doc = "< access with @ref AGTAG"]
    pub tag: Agtag_t,
    #[doc = "< stores programmer-defined data, access with @ref AGDATA"]
    pub data: *mut Agrec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agobj_s"][::std::mem::size_of::<Agobj_s>() - 24usize];
    ["Alignment of Agobj_s"][::std::mem::align_of::<Agobj_s>() - 8usize];
    ["Offset of field: Agobj_s::tag"][::std::mem::offset_of!(Agobj_s, tag) - 0usize];
    ["Offset of field: Agobj_s::data"][::std::mem::offset_of!(Agobj_s, data) - 16usize];
};
#[doc = " @brief This is the node struct allocated per graph (or subgraph).\n\nIt resides in the n_dict of the graph.\nThe node set is maintained by libcdt, but transparently to libgraph callers.\nEvery node may be given an optional string name at its time of creation,\nor it is permissible to pass NULL for the name."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agsubnode_s {
    pub seq_link: Dtlink_t,
    pub id_link: Dtlink_t,
    pub node: *mut Agnode_t,
    pub in_id: *mut Dtlink_t,
    pub out_id: *mut Dtlink_t,
    pub in_seq: *mut Dtlink_t,
    pub out_seq: *mut Dtlink_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agsubnode_s"][::std::mem::size_of::<Agsubnode_s>() - 72usize];
    ["Alignment of Agsubnode_s"][::std::mem::align_of::<Agsubnode_s>() - 8usize];
    ["Offset of field: Agsubnode_s::seq_link"]
        [::std::mem::offset_of!(Agsubnode_s, seq_link) - 0usize];
    ["Offset of field: Agsubnode_s::id_link"]
        [::std::mem::offset_of!(Agsubnode_s, id_link) - 16usize];
    ["Offset of field: Agsubnode_s::node"][::std::mem::offset_of!(Agsubnode_s, node) - 32usize];
    ["Offset of field: Agsubnode_s::in_id"][::std::mem::offset_of!(Agsubnode_s, in_id) - 40usize];
    ["Offset of field: Agsubnode_s::out_id"][::std::mem::offset_of!(Agsubnode_s, out_id) - 48usize];
    ["Offset of field: Agsubnode_s::in_seq"][::std::mem::offset_of!(Agsubnode_s, in_seq) - 56usize];
    ["Offset of field: Agsubnode_s::out_seq"]
        [::std::mem::offset_of!(Agsubnode_s, out_seq) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agnode_s {
    pub base: Agobj_t,
    pub root: *mut Agraph_t,
    pub mainsub: Agsubnode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agnode_s"][::std::mem::size_of::<Agnode_s>() - 104usize];
    ["Alignment of Agnode_s"][::std::mem::align_of::<Agnode_s>() - 8usize];
    ["Offset of field: Agnode_s::base"][::std::mem::offset_of!(Agnode_s, base) - 0usize];
    ["Offset of field: Agnode_s::root"][::std::mem::offset_of!(Agnode_s, root) - 24usize];
    ["Offset of field: Agnode_s::mainsub"][::std::mem::offset_of!(Agnode_s, mainsub) - 32usize];
};
#[doc = " @addtogroup cgraph_edge\n @{"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agedge_s {
    pub base: Agobj_t,
    pub id_link: Dtlink_t,
    pub seq_link: Dtlink_t,
    pub node: *mut Agnode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agedge_s"][::std::mem::size_of::<Agedge_s>() - 64usize];
    ["Alignment of Agedge_s"][::std::mem::align_of::<Agedge_s>() - 8usize];
    ["Offset of field: Agedge_s::base"][::std::mem::offset_of!(Agedge_s, base) - 0usize];
    ["Offset of field: Agedge_s::id_link"][::std::mem::offset_of!(Agedge_s, id_link) - 24usize];
    ["Offset of field: Agedge_s::seq_link"][::std::mem::offset_of!(Agedge_s, seq_link) - 40usize];
    ["Offset of field: Agedge_s::node"][::std::mem::offset_of!(Agedge_s, node) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agedgepair_s {
    pub out: Agedge_t,
    pub in_: Agedge_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agedgepair_s"][::std::mem::size_of::<Agedgepair_s>() - 128usize];
    ["Alignment of Agedgepair_s"][::std::mem::align_of::<Agedgepair_s>() - 8usize];
    ["Offset of field: Agedgepair_s::out"][::std::mem::offset_of!(Agedgepair_s, out) - 0usize];
    ["Offset of field: Agedgepair_s::in_"][::std::mem::offset_of!(Agedgepair_s, in_) - 64usize];
};
#[doc = " graph descriptor"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Agdesc_s {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agdesc_s"][::std::mem::size_of::<Agdesc_s>() - 4usize];
    ["Alignment of Agdesc_s"][::std::mem::align_of::<Agdesc_s>() - 4usize];
};
impl Agdesc_s {
    #[inline]
    pub fn directed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_directed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn directed_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_directed_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn strict(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strict(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn strict_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_strict_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_loop(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_loop(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_loop_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_loop_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn maingraph(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_maingraph(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn maingraph_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_maingraph_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_write(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_write(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_write_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_write_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_attrs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_attrs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_attrs_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_attrs_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_cmpnd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_cmpnd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_cmpnd_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_cmpnd_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        directed: ::std::os::raw::c_uint,
        strict: ::std::os::raw::c_uint,
        no_loop: ::std::os::raw::c_uint,
        maingraph: ::std::os::raw::c_uint,
        no_write: ::std::os::raw::c_uint,
        has_attrs: ::std::os::raw::c_uint,
        has_cmpnd: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let directed: u32 = unsafe { ::std::mem::transmute(directed) };
            directed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let strict: u32 = unsafe { ::std::mem::transmute(strict) };
            strict as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_loop: u32 = unsafe { ::std::mem::transmute(no_loop) };
            no_loop as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let maingraph: u32 = unsafe { ::std::mem::transmute(maingraph) };
            maingraph as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let no_write: u32 = unsafe { ::std::mem::transmute(no_write) };
            no_write as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_attrs: u32 = unsafe { ::std::mem::transmute(has_attrs) };
            has_attrs as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let has_cmpnd: u32 = unsafe { ::std::mem::transmute(has_cmpnd) };
            has_cmpnd as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " object ID allocator"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agiddisc_s {
    pub open: ::std::option::Option<
        unsafe extern "C" fn(g: *mut Agraph_t, arg1: *mut Agdisc_t) -> *mut ::std::os::raw::c_void,
    >,
    pub map: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            objtype: ::std::os::raw::c_int,
            str_: *mut ::std::os::raw::c_char,
            id: *mut IDTYPE,
            createflag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            objtype: ::std::os::raw::c_int,
            id: IDTYPE,
        ),
    >,
    pub print: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            objtype: ::std::os::raw::c_int,
            id: IDTYPE,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void)>,
    pub idregister: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut ::std::os::raw::c_void,
            objtype: ::std::os::raw::c_int,
            obj: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agiddisc_s"][::std::mem::size_of::<Agiddisc_s>() - 48usize];
    ["Alignment of Agiddisc_s"][::std::mem::align_of::<Agiddisc_s>() - 8usize];
    ["Offset of field: Agiddisc_s::open"][::std::mem::offset_of!(Agiddisc_s, open) - 0usize];
    ["Offset of field: Agiddisc_s::map"][::std::mem::offset_of!(Agiddisc_s, map) - 8usize];
    ["Offset of field: Agiddisc_s::free"][::std::mem::offset_of!(Agiddisc_s, free) - 16usize];
    ["Offset of field: Agiddisc_s::print"][::std::mem::offset_of!(Agiddisc_s, print) - 24usize];
    ["Offset of field: Agiddisc_s::close"][::std::mem::offset_of!(Agiddisc_s, close) - 32usize];
    ["Offset of field: Agiddisc_s::idregister"]
        [::std::mem::offset_of!(Agiddisc_s, idregister) - 40usize];
};
#[doc = " IO services"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agiodisc_s {
    pub afread: ::std::option::Option<
        unsafe extern "C" fn(
            chan: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_char,
            bufsize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub putstr: ::std::option::Option<
        unsafe extern "C" fn(
            chan: *mut ::std::os::raw::c_void,
            str_: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(chan: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agiodisc_s"][::std::mem::size_of::<Agiodisc_s>() - 24usize];
    ["Alignment of Agiodisc_s"][::std::mem::align_of::<Agiodisc_s>() - 8usize];
    ["Offset of field: Agiodisc_s::afread"][::std::mem::offset_of!(Agiodisc_s, afread) - 0usize];
    ["Offset of field: Agiodisc_s::putstr"][::std::mem::offset_of!(Agiodisc_s, putstr) - 8usize];
    ["Offset of field: Agiodisc_s::flush"][::std::mem::offset_of!(Agiodisc_s, flush) - 16usize];
};
#[doc = " @brief user's discipline\n\n A default discipline is supplied when NULL is given for any of these fields."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agdisc_s {
    pub id: *mut Agiddisc_t,
    pub io: *mut Agiodisc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agdisc_s"][::std::mem::size_of::<Agdisc_s>() - 16usize];
    ["Alignment of Agdisc_s"][::std::mem::align_of::<Agdisc_s>() - 8usize];
    ["Offset of field: Agdisc_s::id"][::std::mem::offset_of!(Agdisc_s, id) - 0usize];
    ["Offset of field: Agdisc_s::io"][::std::mem::offset_of!(Agdisc_s, io) - 8usize];
};
unsafe extern "C" {
    pub static mut AgIdDisc: Agiddisc_t;
}
unsafe extern "C" {
    pub static mut AgIoDisc: Agiodisc_t;
}
unsafe extern "C" {
    pub static mut AgDefaultDisc: Agdisc_t;
}
#[doc = " client state (closures)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agdstate_s {
    pub id: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agdstate_s"][::std::mem::size_of::<Agdstate_s>() - 8usize];
    ["Alignment of Agdstate_s"][::std::mem::align_of::<Agdstate_s>() - 8usize];
    ["Offset of field: Agdstate_s::id"][::std::mem::offset_of!(Agdstate_s, id) - 0usize];
};
pub type agobjfn_t = ::std::option::Option<
    unsafe extern "C" fn(g: *mut Agraph_t, obj: *mut Agobj_t, arg: *mut ::std::os::raw::c_void),
>;
pub type agobjupdfn_t = ::std::option::Option<
    unsafe extern "C" fn(
        g: *mut Agraph_t,
        obj: *mut Agobj_t,
        arg: *mut ::std::os::raw::c_void,
        sym: *mut Agsym_t,
    ),
>;
#[doc = " client event callbacks, used in Agcbstack_s"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agcbdisc_s {
    pub graph: Agcbdisc_s__bindgen_ty_1,
    pub node: Agcbdisc_s__bindgen_ty_1,
    pub edge: Agcbdisc_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agcbdisc_s__bindgen_ty_1 {
    pub ins: agobjfn_t,
    pub mod_: agobjupdfn_t,
    pub del: agobjfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agcbdisc_s__bindgen_ty_1"]
        [::std::mem::size_of::<Agcbdisc_s__bindgen_ty_1>() - 24usize];
    ["Alignment of Agcbdisc_s__bindgen_ty_1"]
        [::std::mem::align_of::<Agcbdisc_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: Agcbdisc_s__bindgen_ty_1::ins"]
        [::std::mem::offset_of!(Agcbdisc_s__bindgen_ty_1, ins) - 0usize];
    ["Offset of field: Agcbdisc_s__bindgen_ty_1::mod_"]
        [::std::mem::offset_of!(Agcbdisc_s__bindgen_ty_1, mod_) - 8usize];
    ["Offset of field: Agcbdisc_s__bindgen_ty_1::del"]
        [::std::mem::offset_of!(Agcbdisc_s__bindgen_ty_1, del) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agcbdisc_s"][::std::mem::size_of::<Agcbdisc_s>() - 72usize];
    ["Alignment of Agcbdisc_s"][::std::mem::align_of::<Agcbdisc_s>() - 8usize];
    ["Offset of field: Agcbdisc_s::graph"][::std::mem::offset_of!(Agcbdisc_s, graph) - 0usize];
    ["Offset of field: Agcbdisc_s::node"][::std::mem::offset_of!(Agcbdisc_s, node) - 24usize];
    ["Offset of field: Agcbdisc_s::edge"][::std::mem::offset_of!(Agcbdisc_s, edge) - 48usize];
};
#[doc = " enclosing state for Agcbdisc_s, used in Agclos_s"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agcbstack_s {
    pub f: *mut Agcbdisc_t,
    pub state: *mut ::std::os::raw::c_void,
    pub prev: *mut Agcbstack_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agcbstack_s"][::std::mem::size_of::<Agcbstack_s>() - 24usize];
    ["Alignment of Agcbstack_s"][::std::mem::align_of::<Agcbstack_s>() - 8usize];
    ["Offset of field: Agcbstack_s::f"][::std::mem::offset_of!(Agcbstack_s, f) - 0usize];
    ["Offset of field: Agcbstack_s::state"][::std::mem::offset_of!(Agcbstack_s, state) - 8usize];
    ["Offset of field: Agcbstack_s::prev"][::std::mem::offset_of!(Agcbstack_s, prev) - 16usize];
};
unsafe extern "C" {
    pub fn agpushdisc(g: *mut Agraph_t, disc: *mut Agcbdisc_t, state: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn agpopdisc(g: *mut Agraph_t, disc: *mut Agcbdisc_t) -> ::std::os::raw::c_int;
}
#[doc = " shared resources for Agraph_s"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agclos_s {
    pub disc: Agdisc_t,
    pub state: Agdstate_t,
    #[doc = "< shared string dict"]
    pub strdict: *mut ::std::os::raw::c_void,
    pub seq: [u64; 3usize],
    pub cb: *mut Agcbstack_t,
    pub lookup_by_name: [*mut Dict_t; 3usize],
    pub lookup_by_id: [*mut Dict_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agclos_s"][::std::mem::size_of::<Agclos_s>() - 112usize];
    ["Alignment of Agclos_s"][::std::mem::align_of::<Agclos_s>() - 8usize];
    ["Offset of field: Agclos_s::disc"][::std::mem::offset_of!(Agclos_s, disc) - 0usize];
    ["Offset of field: Agclos_s::state"][::std::mem::offset_of!(Agclos_s, state) - 16usize];
    ["Offset of field: Agclos_s::strdict"][::std::mem::offset_of!(Agclos_s, strdict) - 24usize];
    ["Offset of field: Agclos_s::seq"][::std::mem::offset_of!(Agclos_s, seq) - 32usize];
    ["Offset of field: Agclos_s::cb"][::std::mem::offset_of!(Agclos_s, cb) - 56usize];
    ["Offset of field: Agclos_s::lookup_by_name"]
        [::std::mem::offset_of!(Agclos_s, lookup_by_name) - 64usize];
    ["Offset of field: Agclos_s::lookup_by_id"]
        [::std::mem::offset_of!(Agclos_s, lookup_by_id) - 88usize];
};
#[doc = " opaque type; the definition of this is internal to Graphviz"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct graphviz_node_set {
    _unused: [u8; 0],
}
#[doc = " graph or subgraph"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agraph_s {
    pub base: Agobj_t,
    pub desc: Agdesc_t,
    pub seq_link: Dtlink_t,
    pub id_link: Dtlink_t,
    #[doc = "< the node set in sequence"]
    pub n_seq: *mut Dict_t,
    #[doc = "< the node set indexed by ID"]
    pub n_id: *mut graphviz_node_set,
    #[doc = "< holders for edge sets"]
    pub e_seq: *mut Dict_t,
    #[doc = "< holders for edge sets"]
    pub e_id: *mut Dict_t,
    #[doc = "< subgraphs - descendants"]
    pub g_seq: *mut Dict_t,
    #[doc = "< subgraphs - descendants"]
    pub g_id: *mut Dict_t,
    #[doc = "< subgraphs - ancestors"]
    pub parent: *mut Agraph_t,
    #[doc = "< subgraphs - ancestors"]
    pub root: *mut Agraph_t,
    #[doc = "< shared resources"]
    pub clos: *mut Agclos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agraph_s"][::std::mem::size_of::<Agraph_s>() - 136usize];
    ["Alignment of Agraph_s"][::std::mem::align_of::<Agraph_s>() - 8usize];
    ["Offset of field: Agraph_s::base"][::std::mem::offset_of!(Agraph_s, base) - 0usize];
    ["Offset of field: Agraph_s::desc"][::std::mem::offset_of!(Agraph_s, desc) - 24usize];
    ["Offset of field: Agraph_s::seq_link"][::std::mem::offset_of!(Agraph_s, seq_link) - 32usize];
    ["Offset of field: Agraph_s::id_link"][::std::mem::offset_of!(Agraph_s, id_link) - 48usize];
    ["Offset of field: Agraph_s::n_seq"][::std::mem::offset_of!(Agraph_s, n_seq) - 64usize];
    ["Offset of field: Agraph_s::n_id"][::std::mem::offset_of!(Agraph_s, n_id) - 72usize];
    ["Offset of field: Agraph_s::e_seq"][::std::mem::offset_of!(Agraph_s, e_seq) - 80usize];
    ["Offset of field: Agraph_s::e_id"][::std::mem::offset_of!(Agraph_s, e_id) - 88usize];
    ["Offset of field: Agraph_s::g_seq"][::std::mem::offset_of!(Agraph_s, g_seq) - 96usize];
    ["Offset of field: Agraph_s::g_id"][::std::mem::offset_of!(Agraph_s, g_id) - 104usize];
    ["Offset of field: Agraph_s::parent"][::std::mem::offset_of!(Agraph_s, parent) - 112usize];
    ["Offset of field: Agraph_s::root"][::std::mem::offset_of!(Agraph_s, root) - 120usize];
    ["Offset of field: Agraph_s::clos"][::std::mem::offset_of!(Agraph_s, clos) - 128usize];
};
unsafe extern "C" {
    pub fn agopen(
        name: *mut ::std::os::raw::c_char,
        desc: Agdesc_t,
        disc: *mut Agdisc_t,
    ) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agclose(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agread(chan: *mut ::std::os::raw::c_void, disc: *mut Agdisc_t) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agmemread(cp: *const ::std::os::raw::c_char) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agmemconcat(g: *mut Agraph_t, cp: *const ::std::os::raw::c_char) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agconcat(
        g: *mut Agraph_t,
        filename: *const ::std::os::raw::c_char,
        chan: *mut ::std::os::raw::c_void,
        disc: *mut Agdisc_t,
    ) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agwrite(g: *mut Agraph_t, chan: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agisdirected(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agisundirected(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agisstrict(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agissimple(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @addtogroup cgraph_node\n @{"]
    pub fn agnode(
        g: *mut Agraph_t,
        name: *mut ::std::os::raw::c_char,
        createflag: ::std::os::raw::c_int,
    ) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn agidnode(
        g: *mut Agraph_t,
        id: IDTYPE,
        createflag: ::std::os::raw::c_int,
    ) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn agsubnode(
        g: *mut Agraph_t,
        n: *mut Agnode_t,
        createflag: ::std::os::raw::c_int,
    ) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn agfstnode(g: *mut Agraph_t) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn agnxtnode(g: *mut Agraph_t, n: *mut Agnode_t) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn aglstnode(g: *mut Agraph_t) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn agprvnode(g: *mut Agraph_t, n: *mut Agnode_t) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn agsubrep(g: *mut Agraph_t, n: *mut Agnode_t) -> *mut Agsubnode_t;
}
unsafe extern "C" {
    pub fn agnodebefore(u: *mut Agnode_t, v: *mut Agnode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agdelnode(g: *mut Agraph_t, arg_n: *mut Agnode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agrelabel_node(
        n: *mut Agnode_t,
        newname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @defgroup cgraph_edge edges\n  @ingroup cgraph_object\n\n An abstract edge has two endpoint nodes called tail and head\n where all outedges of the same node have it as the tail\n value and similarly all inedges have it as the head.\n In an undirected graph, head and tail are interchangeable.\n If a graph has multi-edges between the same pair of nodes,\n the edge's string name behaves as a secondary key.\n\n Note that an abstract edge has two distinct concrete\n representations: as an in-edge and as an out-edge.\n In particular, the pointer as an out-edge is different\n from the pointer as an in-edge.\n The function @ref ageqedge canonicalizes the pointers before\n doing a comparison and so can be used to test edge equality.\n The sense of an edge can be flipped using @ref agopp.\n\n @{"]
    pub fn agedge(
        g: *mut Agraph_t,
        t: *mut Agnode_t,
        h: *mut Agnode_t,
        name: *mut ::std::os::raw::c_char,
        createflag: ::std::os::raw::c_int,
    ) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agidedge(
        g: *mut Agraph_t,
        t: *mut Agnode_t,
        h: *mut Agnode_t,
        id: IDTYPE,
        createflag: ::std::os::raw::c_int,
    ) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agsubedge(
        g: *mut Agraph_t,
        e: *mut Agedge_t,
        createflag: ::std::os::raw::c_int,
    ) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agfstin(g: *mut Agraph_t, n: *mut Agnode_t) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agnxtin(g: *mut Agraph_t, e: *mut Agedge_t) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agfstout(g: *mut Agraph_t, n: *mut Agnode_t) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agnxtout(g: *mut Agraph_t, e: *mut Agedge_t) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agfstedge(g: *mut Agraph_t, n: *mut Agnode_t) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agnxtedge(g: *mut Agraph_t, e: *mut Agedge_t, n: *mut Agnode_t) -> *mut Agedge_t;
}
unsafe extern "C" {
    pub fn agdeledge(g: *mut Agraph_t, arg_e: *mut Agedge_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @addtogroup cgraph_object\n @{"]
    pub fn agraphof(obj: *mut ::std::os::raw::c_void) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agroot(obj: *mut ::std::os::raw::c_void) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agcontains(
        arg1: *mut Agraph_t,
        obj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agnameof(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agdelete(g: *mut Agraph_t, obj: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agobjkind(obj: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @defgroup cgraph_string string utilities\n  @brief reference-counted strings\n  @ingroup cgraph_misc\n\n  Storage management of strings as reference-counted strings.\n  The caller does not need to dynamically allocate storage.\n\n All uses of cgraph strings need to be freed using @ref agstrfree\n in order to correctly maintain the reference count.\n\n @ref agcanonStr returns a pointer to a version of the input string\n canonicalized for output for later re-parsing.\n This includes quoting special characters and keywords.\n It uses its own internal buffer, so the value will be lost on\n the next call to @ref agcanonStr.\n @ref agcanon is identical with @ref agcanonStr\n except it can be used with any character string.\n The second argument indicates whether or not the string\n should be canonicalized as an HTML-like string.\n\n @{"]
    pub fn agstrdup(
        arg1: *mut Agraph_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = "\n Use of this function should be avoided where possible. It is not possible to\n explicitly indicate whether the caller is trying to create a regular text\n string or an HTML-like string. It is better to be explicit with your intent\n and instead call either @ref agstrdup_text or @ref agstrdup_html."]
    pub fn agstrdup_text(
        arg1: *mut Agraph_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agstrdup_html(
        arg1: *mut Agraph_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn aghtmlstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agstrbind(
        g: *mut Agraph_t,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agstrbind_text(
        g: *mut Agraph_t,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agstrbind_html(
        g: *mut Agraph_t,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agstrfree(
        arg1: *mut Agraph_t,
        arg2: *const ::std::os::raw::c_char,
        is_html: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agstrcanon(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agcanonStr(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[doc = " string attribute container"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agattr_s {
    pub h: Agrec_t,
    #[doc = "< shared dict of Agsym_s to interpret Agattr_s.str"]
    pub dict: *mut Dict_t,
    #[doc = "< the attribute string values indexed by Agsym_s.id"]
    pub str_: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agattr_s"][::std::mem::size_of::<Agattr_s>() - 32usize];
    ["Alignment of Agattr_s"][::std::mem::align_of::<Agattr_s>() - 8usize];
    ["Offset of field: Agattr_s::h"][::std::mem::offset_of!(Agattr_s, h) - 0usize];
    ["Offset of field: Agattr_s::dict"][::std::mem::offset_of!(Agattr_s, dict) - 16usize];
    ["Offset of field: Agattr_s::str_"][::std::mem::offset_of!(Agattr_s, str_) - 24usize];
};
#[doc = " @brief string attribute descriptor\n symbol in Agattr_s.dict"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Agsym_s {
    pub link: Dtlink_t,
    pub name: *mut ::std::os::raw::c_char,
    pub defval: *mut ::std::os::raw::c_char,
    #[doc = "< index in Agattr_s.str"]
    pub id: ::std::os::raw::c_int,
    pub kind: ::std::os::raw::c_uchar,
    pub fixed: ::std::os::raw::c_uchar,
    pub print: ::std::os::raw::c_uchar,
    #[doc = "< graph from whose string pool `name` and `defval` were\n< allocated"]
    pub owner: *mut Agraph_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agsym_s"][::std::mem::size_of::<Agsym_s>() - 48usize];
    ["Alignment of Agsym_s"][::std::mem::align_of::<Agsym_s>() - 8usize];
    ["Offset of field: Agsym_s::link"][::std::mem::offset_of!(Agsym_s, link) - 0usize];
    ["Offset of field: Agsym_s::name"][::std::mem::offset_of!(Agsym_s, name) - 16usize];
    ["Offset of field: Agsym_s::defval"][::std::mem::offset_of!(Agsym_s, defval) - 24usize];
    ["Offset of field: Agsym_s::id"][::std::mem::offset_of!(Agsym_s, id) - 32usize];
    ["Offset of field: Agsym_s::kind"][::std::mem::offset_of!(Agsym_s, kind) - 36usize];
    ["Offset of field: Agsym_s::fixed"][::std::mem::offset_of!(Agsym_s, fixed) - 37usize];
    ["Offset of field: Agsym_s::print"][::std::mem::offset_of!(Agsym_s, print) - 38usize];
    ["Offset of field: Agsym_s::owner"][::std::mem::offset_of!(Agsym_s, owner) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agdatadict_s {
    pub h: Agrec_t,
    pub dict: Agdatadict_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agdatadict_s__bindgen_ty_1 {
    pub n: *mut Dict_t,
    pub e: *mut Dict_t,
    pub g: *mut Dict_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agdatadict_s__bindgen_ty_1"]
        [::std::mem::size_of::<Agdatadict_s__bindgen_ty_1>() - 24usize];
    ["Alignment of Agdatadict_s__bindgen_ty_1"]
        [::std::mem::align_of::<Agdatadict_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: Agdatadict_s__bindgen_ty_1::n"]
        [::std::mem::offset_of!(Agdatadict_s__bindgen_ty_1, n) - 0usize];
    ["Offset of field: Agdatadict_s__bindgen_ty_1::e"]
        [::std::mem::offset_of!(Agdatadict_s__bindgen_ty_1, e) - 8usize];
    ["Offset of field: Agdatadict_s__bindgen_ty_1::g"]
        [::std::mem::offset_of!(Agdatadict_s__bindgen_ty_1, g) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agdatadict_s"][::std::mem::size_of::<Agdatadict_s>() - 40usize];
    ["Alignment of Agdatadict_s"][::std::mem::align_of::<Agdatadict_s>() - 8usize];
    ["Offset of field: Agdatadict_s::h"][::std::mem::offset_of!(Agdatadict_s, h) - 0usize];
    ["Offset of field: Agdatadict_s::dict"][::std::mem::offset_of!(Agdatadict_s, dict) - 16usize];
};
unsafe extern "C" {
    pub fn agattr_text(
        g: *mut Agraph_t,
        kind: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut Agsym_t;
}
unsafe extern "C" {
    pub fn agattr_html(
        g: *mut Agraph_t,
        kind: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut Agsym_t;
}
unsafe extern "C" {
    #[doc = "\n Regular text attributes cannot be created or looked up with this function.\n See @ref agattr_text for that.\n\n @param g Graph. When `g` is `NULL`, the default is set for all graphs\n   created subsequently.\n @param kind May be @ref AGRAPH, @ref AGNODE, or @ref AGEDGE.\n @param value Default value. When `value` is `NULL`, the request is to search\n   for an existing attribute of the given kind and name.\n\n If the attribute already exists, its default for creating new objects is set\n to the given `value`; if it does not exist, a new attribute is created with\n the given default `value`, and the default is applied to all pre-existing\n objects of the given `kind`."]
    pub fn agattr(
        g: *mut Agraph_t,
        kind: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut Agsym_t;
}
unsafe extern "C" {
    #[doc = "\n Use of this function should be avoided where possible. It is not possible to\n explicitly indicate whether the caller is trying to create/lookup a regular\n text attribute or an HTML-like attribute. It is better to be explicit with\n your intent and instead call either @ref agattr_text or @ref agattr_html.\n\n This function has the following behavior:\n   1. If the `value` passed was obtained from `agstrdup_html`, an HTML-like\n      attribute value is created/looked up. That is, the behavior is\n      equivalent to a call to @ref agattr_html.\n   2. Otherwise, a regular text attribute value is created/looked up.\n\n @param g graph. When is NULL, the default is set for all graphs created\n   subsequently.\n @param kind may be @ref AGRAPH, @ref AGNODE, or @ref AGEDGE.\n @param value default value. When is @ref NULL, the request is to search for\n   for an existing attribute of the given kind and name."]
    pub fn agattrsym(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut Agsym_t;
}
unsafe extern "C" {
    pub fn agnxtattr(
        g: *mut Agraph_t,
        kind: ::std::os::raw::c_int,
        attr: *mut Agsym_t,
    ) -> *mut Agsym_t;
}
unsafe extern "C" {
    #[doc = " @param attr\tif `NULL` the function returns the first attribute\n @returns the next one in succession or `NULL` at the end of the list."]
    pub fn agcopyattr(
        oldobj: *mut ::std::os::raw::c_void,
        newobj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @addtogroup cgraph_rec\n @{"]
    pub fn agbindrec(
        obj: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        recsize: ::std::os::raw::c_uint,
        move_to_front: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " @param recsize if 0, the call to @ref agbindrec is simply a lookup\n @returns pointer to `Agrec_t` and user data"]
    pub fn aggetrec(
        obj: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        move_to_front: ::std::os::raw::c_int,
    ) -> *mut Agrec_t;
}
unsafe extern "C" {
    pub fn agdelrec(
        obj: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aginit(
        g: *mut Agraph_t,
        kind: ::std::os::raw::c_int,
        rec_name: *const ::std::os::raw::c_char,
        rec_size: ::std::os::raw::c_int,
        move_to_front: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn agclean(
        g: *mut Agraph_t,
        kind: ::std::os::raw::c_int,
        rec_name: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[doc = " @}"]
    pub fn agget(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agxget(
        obj: *mut ::std::os::raw::c_void,
        sym: *mut Agsym_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agset(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agset_text(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agset_html(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agxset(
        obj: *mut ::std::os::raw::c_void,
        sym: *mut Agsym_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agxset_text(
        obj: *mut ::std::os::raw::c_void,
        sym: *mut Agsym_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agxset_html(
        obj: *mut ::std::os::raw::c_void,
        sym: *mut Agsym_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agsafeset_text(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        def: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "   setting it locally\n\n The attribue set by this function is a regular text attribute. See\n @ref agsafeset_html for the equivalent for an HTML-like attribute.\n\n @param obj Object on which to set the attribute\n @param name Name of the attribute to set\n @param value Value of the attribute to set\n @param def Optional default to declare for the attribute"]
    pub fn agsafeset_html(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        def: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "   setting it locally\n\n The attribue set by this function is an HTML-like attribute. See\n @ref agsafeset_text for the equivalent for a regular text attribute.\n\n @param obj Object on which to set the attribute\n @param name Name of the attribute to set\n @param value Value of the attribute to set\n @param def Optional default to declare for the attribute"]
    pub fn agsafeset(
        obj: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        def: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @defgroup cgraph_subgraph subgraphs\n  @ingroup cgraph_graph\n\n A \"main\" or \"root\" graph defines a namespace for a collection of\n graph objects (subgraphs, nodes, edges) and their attributes.\n Objects may be named by unique strings or by integer IDs.\n\n @ref agsubg finds or creates a subgraph by name.\n\n @ref agidsubg allows a programmer to specify the subgraph by a unique integer\n ID.\n\n A new subgraph is initially empty and is of the same kind as its parent.\n Nested subgraph trees may be created.\n A subgraph's name is only interpreted relative to its parent.\n\n A program can scan subgraphs under a given graph\n using @ref agfstsubg and @ref agnxtsubg.\n\n A subgraph is deleted with @ref agdelsubg (or @ref agclose).\n\n The @ref agparent function returns the immediate parent graph of a subgraph,\n or itself if the graph is already a root graph.\n\n @{"]
    pub fn agsubg(
        g: *mut Agraph_t,
        name: *mut ::std::os::raw::c_char,
        cflag: ::std::os::raw::c_int,
    ) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agidsubg(g: *mut Agraph_t, id: IDTYPE) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agfstsubg(g: *mut Agraph_t) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agnxtsubg(subg: *mut Agraph_t) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agparent(g: *mut Agraph_t) -> *mut Agraph_t;
}
unsafe extern "C" {
    pub fn agdelsubg(g: *mut Agraph_t, sub: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @defgroup card set cardinality\n\n By default, nodes are stored in ordered sets for\n efficient random access to insert, find, and delete nodes.\n\n @ref agnnodes, @ref agnedges, and @ref agnsubg return the\n sizes of node, edge and subgraph sets of a graph.\n\n The function @ref agdegree returns the size of a node’s edge set,\n and takes flags to select in-edges, out-edges, or both.\n\n The function @ref agcountuniqedges returns\n the size of a node’s edge set, and takes flags\n to select in-edges, out-edges, or both.\n Unlike @ref agdegree, each loop is only counted once.\n\n @{"]
    pub fn agnnodes(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agnedges(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agnsubg(g: *mut Agraph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agdegree(
        g: *mut Agraph_t,
        n: *mut Agnode_t,
        in_: ::std::os::raw::c_int,
        out: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agcountuniqedges(
        g: *mut Agraph_t,
        n: *mut Agnode_t,
        in_: ::std::os::raw::c_int,
        out: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const agerrlevel_t_AGWARN: agerrlevel_t = 0;
pub const agerrlevel_t_AGERR: agerrlevel_t = 1;
pub const agerrlevel_t_AGMAX: agerrlevel_t = 2;
pub const agerrlevel_t_AGPREV: agerrlevel_t = 3;
#[doc = " @defgroup cgraph_err error handling\n\n The library provides a variety of mechanisms to control\n the reporting of errors and warnings.\n A message is only written if its type has higher priority than\n a programmer-controlled minimum, which is @ref AGWARN by default.\n The programmer can set this value using @ref agseterr,\n which returns the previous value.\n Calling `agseterr(AGMAX)` turns off the writing of messages.\n\n The function @ref agerr is the main entry point for reporting an anomaly.\n The first argument indicates the type of message.\n Usually, the first argument is @ref AGWARN or @ref AGERR\n to indicate warnings and errors, respectively.\n Sometimes additional context information is only available in functions\n calling the function where the error is actually caught.\n In this case, the calling function can indicate that it is continuing\n the current error by using @ref AGPREV as the first argument.\n The remaining arguments to @ref agerr are the same as\n the arguments to `printf`.\n\n The functions @ref agwarningf and @ref agerrorf are shorthand for\n `agerr(AGWARN,...)` and `agerr(AGERR,...)`, respectively.\n\n Some applications desire to directly control the writing of messages.\n Such an application can use the function @ref agseterrf to register\n the function that the library should call to actually write the message.\n The previous error function is returned.\n By default, the message is written to `stderr`.\n\n Errors not written are stored in a log file.\n The last recorded error can be retrieved by calling @ref aglasterr.\n Unless the printing of error messages has been completely disabled\n by a call to `agseterr(AGMAX)`, standard error must not be wide-oriented,\n even if a user-provided error printing function is provided.\n\n The function @ref agerrors returns non-zero if errors have been reported.\n\n @{"]
pub type agerrlevel_t = ::std::os::raw::c_uint;
pub type agusererrf = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn agseterr(arg1: agerrlevel_t) -> agerrlevel_t;
}
unsafe extern "C" {
    pub fn aglasterr() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn agerr(
        level: agerrlevel_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agerrorf(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn agwarningf(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn agerrors() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agreseterrors() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn agseterrf(arg1: agusererrf) -> agusererrf;
}
unsafe extern "C" {
    #[doc = "< directed"]
    pub static mut Agdirected: Agdesc_t;
}
unsafe extern "C" {
    pub static mut Agstrictdirected: Agdesc_t;
}
unsafe extern "C" {
    #[doc = "< undirected"]
    pub static mut Agundirected: Agdesc_t;
}
unsafe extern "C" {
    #[doc = "< strict undirected"]
    pub static mut Agstrictundirected: Agdesc_t;
}
#[doc = " options for passing to `graphviz_acyclic`"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct graphviz_acyclic_options_t {
    pub outFile: *mut FILE,
    pub doWrite: bool,
    pub Verbose: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of graphviz_acyclic_options_t"]
        [::std::mem::size_of::<graphviz_acyclic_options_t>() - 16usize];
    ["Alignment of graphviz_acyclic_options_t"]
        [::std::mem::align_of::<graphviz_acyclic_options_t>() - 8usize];
    ["Offset of field: graphviz_acyclic_options_t::outFile"]
        [::std::mem::offset_of!(graphviz_acyclic_options_t, outFile) - 0usize];
    ["Offset of field: graphviz_acyclic_options_t::doWrite"]
        [::std::mem::offset_of!(graphviz_acyclic_options_t, doWrite) - 8usize];
    ["Offset of field: graphviz_acyclic_options_t::Verbose"]
        [::std::mem::offset_of!(graphviz_acyclic_options_t, Verbose) - 9usize];
};
unsafe extern "C" {
    #[doc = " programmatic access to `acyclic`\n\n See `man acyclic` for an explanation of the `acyclic` tool.\n\n \\param g Graph to operate on\n \\param opts Options to control acyclic algorithm\n \\param num_rev [inout] Running total of reversed edges\n \\return True if a cycle was found, indicating failure"]
    pub fn graphviz_acyclic(
        g: *mut Agraph_t,
        opts: *const graphviz_acyclic_options_t,
        num_rev: *mut usize,
    ) -> bool;
}
#[doc = " options for passing to `graphviz_tred`"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct graphviz_tred_options_t {
    pub Verbose: bool,
    pub PrintRemovedEdges: bool,
    #[doc = "< stream to write result(s) to"]
    pub out: *mut FILE,
    #[doc = "< stream to print warnings to"]
    pub err: *mut FILE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of graphviz_tred_options_t"][::std::mem::size_of::<graphviz_tred_options_t>() - 24usize];
    ["Alignment of graphviz_tred_options_t"]
        [::std::mem::align_of::<graphviz_tred_options_t>() - 8usize];
    ["Offset of field: graphviz_tred_options_t::Verbose"]
        [::std::mem::offset_of!(graphviz_tred_options_t, Verbose) - 0usize];
    ["Offset of field: graphviz_tred_options_t::PrintRemovedEdges"]
        [::std::mem::offset_of!(graphviz_tred_options_t, PrintRemovedEdges) - 1usize];
    ["Offset of field: graphviz_tred_options_t::out"]
        [::std::mem::offset_of!(graphviz_tred_options_t, out) - 8usize];
    ["Offset of field: graphviz_tred_options_t::err"]
        [::std::mem::offset_of!(graphviz_tred_options_t, err) - 16usize];
};
unsafe extern "C" {
    #[doc = " @brief programmatic access to `tred` -\n [transitive reduction](https://en.wikipedia.org/wiki/Transitive_reduction)\n\n See `man tred` for an explanation of the `tred` tool.\n\n \\param g Graph to operate on\n \\param opts Options to control tred algorithm"]
    pub fn graphviz_tred(g: *mut Agraph_t, opts: *const graphviz_tred_options_t);
}
#[doc = " options for passing to `graphviz_unflatten`"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct graphviz_unflatten_options_t {
    pub Do_fans: bool,
    pub MaxMinlen: ::std::os::raw::c_int,
    pub ChainLimit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of graphviz_unflatten_options_t"]
        [::std::mem::size_of::<graphviz_unflatten_options_t>() - 12usize];
    ["Alignment of graphviz_unflatten_options_t"]
        [::std::mem::align_of::<graphviz_unflatten_options_t>() - 4usize];
    ["Offset of field: graphviz_unflatten_options_t::Do_fans"]
        [::std::mem::offset_of!(graphviz_unflatten_options_t, Do_fans) - 0usize];
    ["Offset of field: graphviz_unflatten_options_t::MaxMinlen"]
        [::std::mem::offset_of!(graphviz_unflatten_options_t, MaxMinlen) - 4usize];
    ["Offset of field: graphviz_unflatten_options_t::ChainLimit"]
        [::std::mem::offset_of!(graphviz_unflatten_options_t, ChainLimit) - 8usize];
};
unsafe extern "C" {
    #[doc = " programmatic access to `unflatten`\n\n See `man unflatten` for an explanation of the `unflatten` tool.\n\n \\param g Graph to operate on\n \\param opts Options to control unflattening"]
    pub fn graphviz_unflatten(g: *mut Agraph_t, opts: *const graphviz_unflatten_options_t);
}
unsafe extern "C" {
    #[doc = " add to a graph any edges with both endpoints within that graph\n\n If `edgeset` is given as `NULL`, edges from the root graph of `g` will be\n considered. In this case if `g` itself is the root graph, this call is a\n no-op.\n\n If `g` is a connected component, the edges added will be all edges attached\n to any node in `g`.\n\n \\param g Graph to add edges to\n \\param edgeset Graph whose edges to consider\n \\return Number of edges added"]
    pub fn graphviz_node_induce(g: *mut Agraph_t, edgeset: *mut Agraph_t) -> usize;
}
#[doc = " graph or subgraph"]
pub type graph_t = Agraph_s;
pub type node_t = Agnode_s;
#[doc = " @addtogroup cgraph_edge\n @{"]
pub type edge_t = Agedge_s;
#[doc = " @brief string attribute descriptor\n symbol in Agattr_s.dict"]
pub type attrsym_t = Agsym_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htmllabel_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct port {
    pub p: pointf,
    pub theta: f64,
    pub bp: *mut boxf,
    pub defined: bool,
    pub constrained: bool,
    pub clip: bool,
    pub dyna: bool,
    pub order: ::std::os::raw::c_uchar,
    pub side: ::std::os::raw::c_uchar,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of port"][::std::mem::size_of::<port>() - 48usize];
    ["Alignment of port"][::std::mem::align_of::<port>() - 8usize];
    ["Offset of field: port::p"][::std::mem::offset_of!(port, p) - 0usize];
    ["Offset of field: port::theta"][::std::mem::offset_of!(port, theta) - 16usize];
    ["Offset of field: port::bp"][::std::mem::offset_of!(port, bp) - 24usize];
    ["Offset of field: port::defined"][::std::mem::offset_of!(port, defined) - 32usize];
    ["Offset of field: port::constrained"][::std::mem::offset_of!(port, constrained) - 33usize];
    ["Offset of field: port::clip"][::std::mem::offset_of!(port, clip) - 34usize];
    ["Offset of field: port::dyna"][::std::mem::offset_of!(port, dyna) - 35usize];
    ["Offset of field: port::order"][::std::mem::offset_of!(port, order) - 36usize];
    ["Offset of field: port::side"][::std::mem::offset_of!(port, side) - 37usize];
    ["Offset of field: port::name"][::std::mem::offset_of!(port, name) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct splineInfo {
    pub swapEnds: ::std::option::Option<unsafe extern "C" fn(e: *mut edge_t) -> bool>,
    pub splineMerge: ::std::option::Option<unsafe extern "C" fn(n: *mut node_t) -> bool>,
    pub ignoreSwap: bool,
    pub isOrtho: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of splineInfo"][::std::mem::size_of::<splineInfo>() - 24usize];
    ["Alignment of splineInfo"][::std::mem::align_of::<splineInfo>() - 8usize];
    ["Offset of field: splineInfo::swapEnds"]
        [::std::mem::offset_of!(splineInfo, swapEnds) - 0usize];
    ["Offset of field: splineInfo::splineMerge"]
        [::std::mem::offset_of!(splineInfo, splineMerge) - 8usize];
    ["Offset of field: splineInfo::ignoreSwap"]
        [::std::mem::offset_of!(splineInfo, ignoreSwap) - 16usize];
    ["Offset of field: splineInfo::isOrtho"][::std::mem::offset_of!(splineInfo, isOrtho) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pathend_t {
    pub nb: boxf,
    pub np: pointf,
    pub sidemask: ::std::os::raw::c_int,
    pub boxn: ::std::os::raw::c_int,
    pub boxes: [boxf; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pathend_t"][::std::mem::size_of::<pathend_t>() - 696usize];
    ["Alignment of pathend_t"][::std::mem::align_of::<pathend_t>() - 8usize];
    ["Offset of field: pathend_t::nb"][::std::mem::offset_of!(pathend_t, nb) - 0usize];
    ["Offset of field: pathend_t::np"][::std::mem::offset_of!(pathend_t, np) - 32usize];
    ["Offset of field: pathend_t::sidemask"][::std::mem::offset_of!(pathend_t, sidemask) - 48usize];
    ["Offset of field: pathend_t::boxn"][::std::mem::offset_of!(pathend_t, boxn) - 52usize];
    ["Offset of field: pathend_t::boxes"][::std::mem::offset_of!(pathend_t, boxes) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct path {
    pub start: port,
    pub end: port,
    #[doc = "< number of subdivisions"]
    pub nbox: usize,
    pub boxes: *mut boxf,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of path"][::std::mem::size_of::<path>() - 120usize];
    ["Alignment of path"][::std::mem::align_of::<path>() - 8usize];
    ["Offset of field: path::start"][::std::mem::offset_of!(path, start) - 0usize];
    ["Offset of field: path::end"][::std::mem::offset_of!(path, end) - 48usize];
    ["Offset of field: path::nbox"][::std::mem::offset_of!(path, nbox) - 96usize];
    ["Offset of field: path::boxes"][::std::mem::offset_of!(path, boxes) - 104usize];
    ["Offset of field: path::data"][::std::mem::offset_of!(path, data) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bezier {
    pub list: *mut pointf,
    pub size: usize,
    pub sflag: u32,
    pub eflag: u32,
    pub sp: pointf,
    pub ep: pointf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bezier"][::std::mem::size_of::<bezier>() - 56usize];
    ["Alignment of bezier"][::std::mem::align_of::<bezier>() - 8usize];
    ["Offset of field: bezier::list"][::std::mem::offset_of!(bezier, list) - 0usize];
    ["Offset of field: bezier::size"][::std::mem::offset_of!(bezier, size) - 8usize];
    ["Offset of field: bezier::sflag"][::std::mem::offset_of!(bezier, sflag) - 16usize];
    ["Offset of field: bezier::eflag"][::std::mem::offset_of!(bezier, eflag) - 20usize];
    ["Offset of field: bezier::sp"][::std::mem::offset_of!(bezier, sp) - 24usize];
    ["Offset of field: bezier::ep"][::std::mem::offset_of!(bezier, ep) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct splines {
    pub list: *mut bezier,
    pub size: usize,
    pub bb: boxf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of splines"][::std::mem::size_of::<splines>() - 48usize];
    ["Alignment of splines"][::std::mem::align_of::<splines>() - 8usize];
    ["Offset of field: splines::list"][::std::mem::offset_of!(splines, list) - 0usize];
    ["Offset of field: splines::size"][::std::mem::offset_of!(splines, size) - 8usize];
    ["Offset of field: splines::bb"][::std::mem::offset_of!(splines, bb) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct textlabel_t {
    pub text: *mut ::std::os::raw::c_char,
    pub fontname: *mut ::std::os::raw::c_char,
    pub fontcolor: *mut ::std::os::raw::c_char,
    pub charset: ::std::os::raw::c_int,
    pub fontsize: f64,
    pub dimen: pointf,
    pub space: pointf,
    pub pos: pointf,
    pub u: textlabel_t__bindgen_ty_1,
    pub valign: ::std::os::raw::c_char,
    pub set: bool,
    pub html: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union textlabel_t__bindgen_ty_1 {
    pub txt: textlabel_t__bindgen_ty_1__bindgen_ty_1,
    pub html: *mut htmllabel_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct textlabel_t__bindgen_ty_1__bindgen_ty_1 {
    pub span: *mut textspan_t,
    pub nspans: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of textlabel_t__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<textlabel_t__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of textlabel_t__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<textlabel_t__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: textlabel_t__bindgen_ty_1__bindgen_ty_1::span"]
        [::std::mem::offset_of!(textlabel_t__bindgen_ty_1__bindgen_ty_1, span) - 0usize];
    ["Offset of field: textlabel_t__bindgen_ty_1__bindgen_ty_1::nspans"]
        [::std::mem::offset_of!(textlabel_t__bindgen_ty_1__bindgen_ty_1, nspans) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of textlabel_t__bindgen_ty_1"]
        [::std::mem::size_of::<textlabel_t__bindgen_ty_1>() - 16usize];
    ["Alignment of textlabel_t__bindgen_ty_1"]
        [::std::mem::align_of::<textlabel_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: textlabel_t__bindgen_ty_1::txt"]
        [::std::mem::offset_of!(textlabel_t__bindgen_ty_1, txt) - 0usize];
    ["Offset of field: textlabel_t__bindgen_ty_1::html"]
        [::std::mem::offset_of!(textlabel_t__bindgen_ty_1, html) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of textlabel_t"][::std::mem::size_of::<textlabel_t>() - 112usize];
    ["Alignment of textlabel_t"][::std::mem::align_of::<textlabel_t>() - 8usize];
    ["Offset of field: textlabel_t::text"][::std::mem::offset_of!(textlabel_t, text) - 0usize];
    ["Offset of field: textlabel_t::fontname"]
        [::std::mem::offset_of!(textlabel_t, fontname) - 8usize];
    ["Offset of field: textlabel_t::fontcolor"]
        [::std::mem::offset_of!(textlabel_t, fontcolor) - 16usize];
    ["Offset of field: textlabel_t::charset"]
        [::std::mem::offset_of!(textlabel_t, charset) - 24usize];
    ["Offset of field: textlabel_t::fontsize"]
        [::std::mem::offset_of!(textlabel_t, fontsize) - 32usize];
    ["Offset of field: textlabel_t::dimen"][::std::mem::offset_of!(textlabel_t, dimen) - 40usize];
    ["Offset of field: textlabel_t::space"][::std::mem::offset_of!(textlabel_t, space) - 56usize];
    ["Offset of field: textlabel_t::pos"][::std::mem::offset_of!(textlabel_t, pos) - 72usize];
    ["Offset of field: textlabel_t::u"][::std::mem::offset_of!(textlabel_t, u) - 88usize];
    ["Offset of field: textlabel_t::valign"]
        [::std::mem::offset_of!(textlabel_t, valign) - 104usize];
    ["Offset of field: textlabel_t::set"][::std::mem::offset_of!(textlabel_t, set) - 105usize];
    ["Offset of field: textlabel_t::html"][::std::mem::offset_of!(textlabel_t, html) - 106usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct graphviz_polygon_style_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of graphviz_polygon_style_t"]
        [::std::mem::size_of::<graphviz_polygon_style_t>() - 4usize];
    ["Alignment of graphviz_polygon_style_t"]
        [::std::mem::align_of::<graphviz_polygon_style_t>() - 4usize];
};
impl graphviz_polygon_style_t {
    #[inline]
    pub fn filled(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_filled(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn filled_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_filled_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn radial(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_radial(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn radial_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_radial_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rounded(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rounded(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rounded_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_rounded_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn diagonals(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_diagonals(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn diagonals_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_diagonals_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auxlabels(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_auxlabels(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auxlabels_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_auxlabels_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn invisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_invisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn invisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_invisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn striped(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_striped(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn striped_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_striped_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dotted(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dotted(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dotted_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dotted_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dashed(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dashed(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dashed_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dashed_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wedged(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wedged(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wedged_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_wedged_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn underline(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_underline(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn underline_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_underline_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixedshape(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fixedshape(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixedshape_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_fixedshape_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn shape(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_shape(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shape_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_shape_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        filled: bool,
        radial: bool,
        rounded: bool,
        diagonals: bool,
        auxlabels: bool,
        invisible: bool,
        striped: bool,
        dotted: bool,
        dashed: bool,
        wedged: bool,
        underline: bool,
        fixedshape: bool,
        shape: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let filled: u8 = unsafe { ::std::mem::transmute(filled) };
            filled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let radial: u8 = unsafe { ::std::mem::transmute(radial) };
            radial as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rounded: u8 = unsafe { ::std::mem::transmute(rounded) };
            rounded as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let diagonals: u8 = unsafe { ::std::mem::transmute(diagonals) };
            diagonals as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let auxlabels: u8 = unsafe { ::std::mem::transmute(auxlabels) };
            auxlabels as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let invisible: u8 = unsafe { ::std::mem::transmute(invisible) };
            invisible as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let striped: u8 = unsafe { ::std::mem::transmute(striped) };
            striped as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let dotted: u8 = unsafe { ::std::mem::transmute(dotted) };
            dotted as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let dashed: u8 = unsafe { ::std::mem::transmute(dashed) };
            dashed as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let wedged: u8 = unsafe { ::std::mem::transmute(wedged) };
            wedged as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let underline: u8 = unsafe { ::std::mem::transmute(underline) };
            underline as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let fixedshape: u8 = unsafe { ::std::mem::transmute(fixedshape) };
            fixedshape as u64
        });
        __bindgen_bitfield_unit.set(12usize, 7u8, {
            let shape: u32 = unsafe { ::std::mem::transmute(shape) };
            shape as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct polygon_t {
    pub regular: ::std::os::raw::c_int,
    #[doc = "< number of periphery lines"]
    pub peripheries: usize,
    #[doc = "< number of sides"]
    pub sides: usize,
    pub orientation: f64,
    pub distortion: f64,
    pub skew: f64,
    #[doc = "< ROUNDED, DIAGONAL corners, etc."]
    pub option: graphviz_polygon_style_t,
    pub vertices: *mut pointf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of polygon_t"][::std::mem::size_of::<polygon_t>() - 64usize];
    ["Alignment of polygon_t"][::std::mem::align_of::<polygon_t>() - 8usize];
    ["Offset of field: polygon_t::regular"][::std::mem::offset_of!(polygon_t, regular) - 0usize];
    ["Offset of field: polygon_t::peripheries"]
        [::std::mem::offset_of!(polygon_t, peripheries) - 8usize];
    ["Offset of field: polygon_t::sides"][::std::mem::offset_of!(polygon_t, sides) - 16usize];
    ["Offset of field: polygon_t::orientation"]
        [::std::mem::offset_of!(polygon_t, orientation) - 24usize];
    ["Offset of field: polygon_t::distortion"]
        [::std::mem::offset_of!(polygon_t, distortion) - 32usize];
    ["Offset of field: polygon_t::skew"][::std::mem::offset_of!(polygon_t, skew) - 40usize];
    ["Offset of field: polygon_t::option"][::std::mem::offset_of!(polygon_t, option) - 48usize];
    ["Offset of field: polygon_t::vertices"][::std::mem::offset_of!(polygon_t, vertices) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union inside_t {
    pub a: inside_t__bindgen_ty_1,
    pub s: inside_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inside_t__bindgen_ty_1 {
    pub p: *mut pointf,
    pub r: *mut f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inside_t__bindgen_ty_1"][::std::mem::size_of::<inside_t__bindgen_ty_1>() - 16usize];
    ["Alignment of inside_t__bindgen_ty_1"]
        [::std::mem::align_of::<inside_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: inside_t__bindgen_ty_1::p"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_1, p) - 0usize];
    ["Offset of field: inside_t__bindgen_ty_1::r"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_1, r) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inside_t__bindgen_ty_2 {
    pub n: *mut node_t,
    pub bp: *mut boxf,
    #[doc = "< last node argument"]
    pub lastn: *mut node_t,
    #[doc = "< last radius seen"]
    pub radius: f64,
    #[doc = "< last seen polygon"]
    pub last_poly: *mut polygon_t,
    #[doc = "< last used polygon vertex"]
    pub last: usize,
    #[doc = "< last used outline periphery"]
    pub outp: usize,
    pub scalex: f64,
    pub scaley: f64,
    pub box_URx: f64,
    pub box_URy: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inside_t__bindgen_ty_2"][::std::mem::size_of::<inside_t__bindgen_ty_2>() - 88usize];
    ["Alignment of inside_t__bindgen_ty_2"]
        [::std::mem::align_of::<inside_t__bindgen_ty_2>() - 8usize];
    ["Offset of field: inside_t__bindgen_ty_2::n"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, n) - 0usize];
    ["Offset of field: inside_t__bindgen_ty_2::bp"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, bp) - 8usize];
    ["Offset of field: inside_t__bindgen_ty_2::lastn"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, lastn) - 16usize];
    ["Offset of field: inside_t__bindgen_ty_2::radius"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, radius) - 24usize];
    ["Offset of field: inside_t__bindgen_ty_2::last_poly"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, last_poly) - 32usize];
    ["Offset of field: inside_t__bindgen_ty_2::last"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, last) - 40usize];
    ["Offset of field: inside_t__bindgen_ty_2::outp"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, outp) - 48usize];
    ["Offset of field: inside_t__bindgen_ty_2::scalex"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, scalex) - 56usize];
    ["Offset of field: inside_t__bindgen_ty_2::scaley"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, scaley) - 64usize];
    ["Offset of field: inside_t__bindgen_ty_2::box_URx"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, box_URx) - 72usize];
    ["Offset of field: inside_t__bindgen_ty_2::box_URy"]
        [::std::mem::offset_of!(inside_t__bindgen_ty_2, box_URy) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inside_t"][::std::mem::size_of::<inside_t>() - 88usize];
    ["Alignment of inside_t"][::std::mem::align_of::<inside_t>() - 8usize];
    ["Offset of field: inside_t::a"][::std::mem::offset_of!(inside_t, a) - 0usize];
    ["Offset of field: inside_t::s"][::std::mem::offset_of!(inside_t, s) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stroke_t {
    #[doc = "< number of points in the stroke"]
    pub nvertices: usize,
    pub vertices: *mut pointf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stroke_t"][::std::mem::size_of::<stroke_t>() - 16usize];
    ["Alignment of stroke_t"][::std::mem::align_of::<stroke_t>() - 8usize];
    ["Offset of field: stroke_t::nvertices"][::std::mem::offset_of!(stroke_t, nvertices) - 0usize];
    ["Offset of field: stroke_t::vertices"][::std::mem::offset_of!(stroke_t, vertices) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shape_functions {
    pub initfn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut node_t)>,
    pub freefn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut node_t)>,
    pub portfn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut node_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
        ) -> port,
    >,
    pub insidefn: ::std::option::Option<
        unsafe extern "C" fn(inside_context: *mut inside_t, arg1: pointf) -> bool,
    >,
    pub pboxfn: ::std::option::Option<
        unsafe extern "C" fn(
            n: *mut node_t,
            p: *mut port,
            side: ::std::os::raw::c_int,
            rv: *mut boxf,
            kptr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub codefn: ::std::option::Option<unsafe extern "C" fn(job: *mut GVJ_t, n: *mut node_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shape_functions"][::std::mem::size_of::<shape_functions>() - 48usize];
    ["Alignment of shape_functions"][::std::mem::align_of::<shape_functions>() - 8usize];
    ["Offset of field: shape_functions::initfn"]
        [::std::mem::offset_of!(shape_functions, initfn) - 0usize];
    ["Offset of field: shape_functions::freefn"]
        [::std::mem::offset_of!(shape_functions, freefn) - 8usize];
    ["Offset of field: shape_functions::portfn"]
        [::std::mem::offset_of!(shape_functions, portfn) - 16usize];
    ["Offset of field: shape_functions::insidefn"]
        [::std::mem::offset_of!(shape_functions, insidefn) - 24usize];
    ["Offset of field: shape_functions::pboxfn"]
        [::std::mem::offset_of!(shape_functions, pboxfn) - 32usize];
    ["Offset of field: shape_functions::codefn"]
        [::std::mem::offset_of!(shape_functions, codefn) - 40usize];
};
pub const shape_kind_SH_UNSET: shape_kind = 0;
pub const shape_kind_SH_POLY: shape_kind = 1;
pub const shape_kind_SH_RECORD: shape_kind = 2;
pub const shape_kind_SH_POINT: shape_kind = 3;
pub const shape_kind_SH_EPSF: shape_kind = 4;
pub type shape_kind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shape_desc {
    pub name: *mut ::std::os::raw::c_char,
    pub fns: *mut shape_functions,
    pub polygon: *mut polygon_t,
    pub usershape: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shape_desc"][::std::mem::size_of::<shape_desc>() - 32usize];
    ["Alignment of shape_desc"][::std::mem::align_of::<shape_desc>() - 8usize];
    ["Offset of field: shape_desc::name"][::std::mem::offset_of!(shape_desc, name) - 0usize];
    ["Offset of field: shape_desc::fns"][::std::mem::offset_of!(shape_desc, fns) - 8usize];
    ["Offset of field: shape_desc::polygon"][::std::mem::offset_of!(shape_desc, polygon) - 16usize];
    ["Offset of field: shape_desc::usershape"]
        [::std::mem::offset_of!(shape_desc, usershape) - 24usize];
};
pub const imagetype_t_FT_NULL: imagetype_t = 0;
pub const imagetype_t_FT_BMP: imagetype_t = 1;
pub const imagetype_t_FT_GIF: imagetype_t = 2;
pub const imagetype_t_FT_PNG: imagetype_t = 3;
pub const imagetype_t_FT_JPEG: imagetype_t = 4;
pub const imagetype_t_FT_PDF: imagetype_t = 5;
pub const imagetype_t_FT_PS: imagetype_t = 6;
pub const imagetype_t_FT_EPS: imagetype_t = 7;
pub const imagetype_t_FT_SVG: imagetype_t = 8;
pub const imagetype_t_FT_XML: imagetype_t = 9;
pub const imagetype_t_FT_RIFF: imagetype_t = 10;
pub const imagetype_t_FT_WEBP: imagetype_t = 11;
pub const imagetype_t_FT_ICO: imagetype_t = 12;
pub const imagetype_t_FT_TIFF: imagetype_t = 13;
pub type imagetype_t = ::std::os::raw::c_uint;
pub const imagescale_t_IMAGESCALE_FALSE: imagescale_t = 0;
pub const imagescale_t_IMAGESCALE_TRUE: imagescale_t = 1;
pub const imagescale_t_IMAGESCALE_WIDTH: imagescale_t = 2;
pub const imagescale_t_IMAGESCALE_HEIGHT: imagescale_t = 3;
pub const imagescale_t_IMAGESCALE_BOTH: imagescale_t = 4;
pub type imagescale_t = ::std::os::raw::c_uint;
pub const imagepos_t_IMAGEPOS_TOP_LEFT: imagepos_t = 0;
pub const imagepos_t_IMAGEPOS_TOP_CENTER: imagepos_t = 1;
pub const imagepos_t_IMAGEPOS_TOP_RIGHT: imagepos_t = 2;
pub const imagepos_t_IMAGEPOS_MIDDLE_LEFT: imagepos_t = 3;
pub const imagepos_t_IMAGEPOS_MIDDLE_CENTER: imagepos_t = 4;
pub const imagepos_t_IMAGEPOS_MIDDLE_RIGHT: imagepos_t = 5;
pub const imagepos_t_IMAGEPOS_BOTTOM_LEFT: imagepos_t = 6;
pub const imagepos_t_IMAGEPOS_BOTTOM_CENTER: imagepos_t = 7;
pub const imagepos_t_IMAGEPOS_BOTTOM_RIGHT: imagepos_t = 8;
pub type imagepos_t = ::std::os::raw::c_uint;
pub type usershape_t = usershape_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct usershape_s {
    pub link: Dtlink_t,
    pub name: *const ::std::os::raw::c_char,
    pub macro_id: ::std::os::raw::c_int,
    pub must_inline: bool,
    pub nocache: bool,
    pub f: *mut FILE,
    pub type_: imagetype_t,
    pub stringtype: *mut ::std::os::raw::c_char,
    pub x: f64,
    pub y: f64,
    pub w: f64,
    pub h: f64,
    pub dpi: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub datasize: usize,
    pub datafree: ::std::option::Option<unsafe extern "C" fn(us: *mut usershape_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of usershape_s"][::std::mem::size_of::<usershape_s>() - 120usize];
    ["Alignment of usershape_s"][::std::mem::align_of::<usershape_s>() - 8usize];
    ["Offset of field: usershape_s::link"][::std::mem::offset_of!(usershape_s, link) - 0usize];
    ["Offset of field: usershape_s::name"][::std::mem::offset_of!(usershape_s, name) - 16usize];
    ["Offset of field: usershape_s::macro_id"]
        [::std::mem::offset_of!(usershape_s, macro_id) - 24usize];
    ["Offset of field: usershape_s::must_inline"]
        [::std::mem::offset_of!(usershape_s, must_inline) - 28usize];
    ["Offset of field: usershape_s::nocache"]
        [::std::mem::offset_of!(usershape_s, nocache) - 29usize];
    ["Offset of field: usershape_s::f"][::std::mem::offset_of!(usershape_s, f) - 32usize];
    ["Offset of field: usershape_s::type_"][::std::mem::offset_of!(usershape_s, type_) - 40usize];
    ["Offset of field: usershape_s::stringtype"]
        [::std::mem::offset_of!(usershape_s, stringtype) - 48usize];
    ["Offset of field: usershape_s::x"][::std::mem::offset_of!(usershape_s, x) - 56usize];
    ["Offset of field: usershape_s::y"][::std::mem::offset_of!(usershape_s, y) - 64usize];
    ["Offset of field: usershape_s::w"][::std::mem::offset_of!(usershape_s, w) - 72usize];
    ["Offset of field: usershape_s::h"][::std::mem::offset_of!(usershape_s, h) - 80usize];
    ["Offset of field: usershape_s::dpi"][::std::mem::offset_of!(usershape_s, dpi) - 88usize];
    ["Offset of field: usershape_s::data"][::std::mem::offset_of!(usershape_s, data) - 96usize];
    ["Offset of field: usershape_s::datasize"]
        [::std::mem::offset_of!(usershape_s, datasize) - 104usize];
    ["Offset of field: usershape_s::datafree"]
        [::std::mem::offset_of!(usershape_s, datafree) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adjmatrix_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rank_t {
    pub n: ::std::os::raw::c_int,
    pub v: *mut *mut node_t,
    pub an: ::std::os::raw::c_int,
    pub av: *mut *mut node_t,
    pub ht1: f64,
    pub ht2: f64,
    pub pht1: f64,
    pub pht2: f64,
    pub candidate: bool,
    pub valid: bool,
    pub cache_nc: i64,
    pub flat: *mut adjmatrix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rank_t"][::std::mem::size_of::<rank_t>() - 88usize];
    ["Alignment of rank_t"][::std::mem::align_of::<rank_t>() - 8usize];
    ["Offset of field: rank_t::n"][::std::mem::offset_of!(rank_t, n) - 0usize];
    ["Offset of field: rank_t::v"][::std::mem::offset_of!(rank_t, v) - 8usize];
    ["Offset of field: rank_t::an"][::std::mem::offset_of!(rank_t, an) - 16usize];
    ["Offset of field: rank_t::av"][::std::mem::offset_of!(rank_t, av) - 24usize];
    ["Offset of field: rank_t::ht1"][::std::mem::offset_of!(rank_t, ht1) - 32usize];
    ["Offset of field: rank_t::ht2"][::std::mem::offset_of!(rank_t, ht2) - 40usize];
    ["Offset of field: rank_t::pht1"][::std::mem::offset_of!(rank_t, pht1) - 48usize];
    ["Offset of field: rank_t::pht2"][::std::mem::offset_of!(rank_t, pht2) - 56usize];
    ["Offset of field: rank_t::candidate"][::std::mem::offset_of!(rank_t, candidate) - 64usize];
    ["Offset of field: rank_t::valid"][::std::mem::offset_of!(rank_t, valid) - 65usize];
    ["Offset of field: rank_t::cache_nc"][::std::mem::offset_of!(rank_t, cache_nc) - 72usize];
    ["Offset of field: rank_t::flat"][::std::mem::offset_of!(rank_t, flat) - 80usize];
};
pub const ratio_t_R_NONE: ratio_t = 0;
pub const ratio_t_R_VALUE: ratio_t = 1;
pub const ratio_t_R_FILL: ratio_t = 2;
pub const ratio_t_R_COMPRESS: ratio_t = 3;
pub const ratio_t_R_AUTO: ratio_t = 4;
pub const ratio_t_R_EXPAND: ratio_t = 5;
pub type ratio_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layout_t {
    pub quantum: f64,
    pub scale: f64,
    pub ratio: f64,
    pub dpi: f64,
    pub margin: pointf,
    pub page: pointf,
    pub size: pointf,
    pub filled: bool,
    pub landscape: bool,
    pub centered: bool,
    pub ratio_kind: ratio_t,
    pub xdots: *mut ::std::os::raw::c_void,
    pub id: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of layout_t"][::std::mem::size_of::<layout_t>() - 104usize];
    ["Alignment of layout_t"][::std::mem::align_of::<layout_t>() - 8usize];
    ["Offset of field: layout_t::quantum"][::std::mem::offset_of!(layout_t, quantum) - 0usize];
    ["Offset of field: layout_t::scale"][::std::mem::offset_of!(layout_t, scale) - 8usize];
    ["Offset of field: layout_t::ratio"][::std::mem::offset_of!(layout_t, ratio) - 16usize];
    ["Offset of field: layout_t::dpi"][::std::mem::offset_of!(layout_t, dpi) - 24usize];
    ["Offset of field: layout_t::margin"][::std::mem::offset_of!(layout_t, margin) - 32usize];
    ["Offset of field: layout_t::page"][::std::mem::offset_of!(layout_t, page) - 48usize];
    ["Offset of field: layout_t::size"][::std::mem::offset_of!(layout_t, size) - 64usize];
    ["Offset of field: layout_t::filled"][::std::mem::offset_of!(layout_t, filled) - 80usize];
    ["Offset of field: layout_t::landscape"][::std::mem::offset_of!(layout_t, landscape) - 81usize];
    ["Offset of field: layout_t::centered"][::std::mem::offset_of!(layout_t, centered) - 82usize];
    ["Offset of field: layout_t::ratio_kind"]
        [::std::mem::offset_of!(layout_t, ratio_kind) - 84usize];
    ["Offset of field: layout_t::xdots"][::std::mem::offset_of!(layout_t, xdots) - 88usize];
    ["Offset of field: layout_t::id"][::std::mem::offset_of!(layout_t, id) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct field_t {
    pub size: pointf,
    pub b: boxf,
    pub n_flds: ::std::os::raw::c_int,
    pub lp: *mut textlabel_t,
    pub fld: *mut *mut field_t,
    pub id: *mut ::std::os::raw::c_char,
    pub LR: ::std::os::raw::c_uchar,
    pub sides: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of field_t"][::std::mem::size_of::<field_t>() - 88usize];
    ["Alignment of field_t"][::std::mem::align_of::<field_t>() - 8usize];
    ["Offset of field: field_t::size"][::std::mem::offset_of!(field_t, size) - 0usize];
    ["Offset of field: field_t::b"][::std::mem::offset_of!(field_t, b) - 16usize];
    ["Offset of field: field_t::n_flds"][::std::mem::offset_of!(field_t, n_flds) - 48usize];
    ["Offset of field: field_t::lp"][::std::mem::offset_of!(field_t, lp) - 56usize];
    ["Offset of field: field_t::fld"][::std::mem::offset_of!(field_t, fld) - 64usize];
    ["Offset of field: field_t::id"][::std::mem::offset_of!(field_t, id) - 72usize];
    ["Offset of field: field_t::LR"][::std::mem::offset_of!(field_t, LR) - 80usize];
    ["Offset of field: field_t::sides"][::std::mem::offset_of!(field_t, sides) - 81usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlist_t {
    pub list: *mut *mut node_t,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlist_t"][::std::mem::size_of::<nlist_t>() - 16usize];
    ["Alignment of nlist_t"][::std::mem::align_of::<nlist_t>() - 8usize];
    ["Offset of field: nlist_t::list"][::std::mem::offset_of!(nlist_t, list) - 0usize];
    ["Offset of field: nlist_t::size"][::std::mem::offset_of!(nlist_t, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elist {
    pub list: *mut *mut edge_t,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elist"][::std::mem::size_of::<elist>() - 16usize];
    ["Alignment of elist"][::std::mem::align_of::<elist>() - 8usize];
    ["Offset of field: elist::list"][::std::mem::offset_of!(elist, list) - 0usize];
    ["Offset of field: elist::size"][::std::mem::offset_of!(elist, size) - 8usize];
};
pub const fontname_kind_NATIVEFONTS: fontname_kind = 0;
pub const fontname_kind_PSFONTS: fontname_kind = 1;
pub const fontname_kind_SVGFONTS: fontname_kind = 2;
pub type fontname_kind = ::std::os::raw::c_uint;
#[doc = " @addtogroup cgraph_graph\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agraphinfo_t {
    pub hdr: Agrec_t,
    pub drawing: *mut layout_t,
    pub label: *mut textlabel_t,
    pub bb: boxf,
    pub border: [pointf; 4usize],
    pub gui_state: ::std::os::raw::c_uchar,
    pub has_labels: ::std::os::raw::c_uchar,
    pub has_images: bool,
    pub charset: ::std::os::raw::c_uchar,
    pub rankdir: ::std::os::raw::c_int,
    pub ht1: f64,
    pub ht2: f64,
    pub flags: ::std::os::raw::c_ushort,
    pub alg: *mut ::std::os::raw::c_void,
    pub gvc: *mut GVC_t,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(g: *mut graph_t)>,
    pub neato_nlist: *mut *mut node_t,
    pub move_: ::std::os::raw::c_int,
    pub dist: *mut *mut f64,
    pub spring: *mut *mut f64,
    pub sum_t: *mut *mut f64,
    pub t: *mut *mut *mut f64,
    pub ndim: ::std::os::raw::c_ushort,
    pub odim: ::std::os::raw::c_ushort,
    pub n_cluster: ::std::os::raw::c_int,
    pub clust: *mut *mut graph_t,
    pub dotroot: *mut graph_t,
    pub nlist: *mut node_t,
    pub rank: *mut rank_t,
    pub parent: *mut graph_t,
    pub level: ::std::os::raw::c_int,
    pub minrep: *mut node_t,
    pub maxrep: *mut node_t,
    pub comp: nlist_t,
    pub minset: *mut node_t,
    pub maxset: *mut node_t,
    pub minrank: ::std::os::raw::c_int,
    pub maxrank: ::std::os::raw::c_int,
    pub has_flat_edges: bool,
    pub showboxes: ::std::os::raw::c_uchar,
    pub fontnames: fontname_kind,
    pub nodesep: ::std::os::raw::c_int,
    pub ranksep: ::std::os::raw::c_int,
    pub ln: *mut node_t,
    pub rn: *mut node_t,
    pub leader: *mut node_t,
    pub rankleader: *mut *mut node_t,
    pub expanded: bool,
    pub installed: ::std::os::raw::c_char,
    pub set_type: ::std::os::raw::c_char,
    pub label_pos: ::std::os::raw::c_char,
    pub exact_ranksep: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agraphinfo_t"][::std::mem::size_of::<Agraphinfo_t>() - 400usize];
    ["Alignment of Agraphinfo_t"][::std::mem::align_of::<Agraphinfo_t>() - 8usize];
    ["Offset of field: Agraphinfo_t::hdr"][::std::mem::offset_of!(Agraphinfo_t, hdr) - 0usize];
    ["Offset of field: Agraphinfo_t::drawing"]
        [::std::mem::offset_of!(Agraphinfo_t, drawing) - 16usize];
    ["Offset of field: Agraphinfo_t::label"][::std::mem::offset_of!(Agraphinfo_t, label) - 24usize];
    ["Offset of field: Agraphinfo_t::bb"][::std::mem::offset_of!(Agraphinfo_t, bb) - 32usize];
    ["Offset of field: Agraphinfo_t::border"]
        [::std::mem::offset_of!(Agraphinfo_t, border) - 64usize];
    ["Offset of field: Agraphinfo_t::gui_state"]
        [::std::mem::offset_of!(Agraphinfo_t, gui_state) - 128usize];
    ["Offset of field: Agraphinfo_t::has_labels"]
        [::std::mem::offset_of!(Agraphinfo_t, has_labels) - 129usize];
    ["Offset of field: Agraphinfo_t::has_images"]
        [::std::mem::offset_of!(Agraphinfo_t, has_images) - 130usize];
    ["Offset of field: Agraphinfo_t::charset"]
        [::std::mem::offset_of!(Agraphinfo_t, charset) - 131usize];
    ["Offset of field: Agraphinfo_t::rankdir"]
        [::std::mem::offset_of!(Agraphinfo_t, rankdir) - 132usize];
    ["Offset of field: Agraphinfo_t::ht1"][::std::mem::offset_of!(Agraphinfo_t, ht1) - 136usize];
    ["Offset of field: Agraphinfo_t::ht2"][::std::mem::offset_of!(Agraphinfo_t, ht2) - 144usize];
    ["Offset of field: Agraphinfo_t::flags"]
        [::std::mem::offset_of!(Agraphinfo_t, flags) - 152usize];
    ["Offset of field: Agraphinfo_t::alg"][::std::mem::offset_of!(Agraphinfo_t, alg) - 160usize];
    ["Offset of field: Agraphinfo_t::gvc"][::std::mem::offset_of!(Agraphinfo_t, gvc) - 168usize];
    ["Offset of field: Agraphinfo_t::cleanup"]
        [::std::mem::offset_of!(Agraphinfo_t, cleanup) - 176usize];
    ["Offset of field: Agraphinfo_t::neato_nlist"]
        [::std::mem::offset_of!(Agraphinfo_t, neato_nlist) - 184usize];
    ["Offset of field: Agraphinfo_t::move_"]
        [::std::mem::offset_of!(Agraphinfo_t, move_) - 192usize];
    ["Offset of field: Agraphinfo_t::dist"][::std::mem::offset_of!(Agraphinfo_t, dist) - 200usize];
    ["Offset of field: Agraphinfo_t::spring"]
        [::std::mem::offset_of!(Agraphinfo_t, spring) - 208usize];
    ["Offset of field: Agraphinfo_t::sum_t"]
        [::std::mem::offset_of!(Agraphinfo_t, sum_t) - 216usize];
    ["Offset of field: Agraphinfo_t::t"][::std::mem::offset_of!(Agraphinfo_t, t) - 224usize];
    ["Offset of field: Agraphinfo_t::ndim"][::std::mem::offset_of!(Agraphinfo_t, ndim) - 232usize];
    ["Offset of field: Agraphinfo_t::odim"][::std::mem::offset_of!(Agraphinfo_t, odim) - 234usize];
    ["Offset of field: Agraphinfo_t::n_cluster"]
        [::std::mem::offset_of!(Agraphinfo_t, n_cluster) - 236usize];
    ["Offset of field: Agraphinfo_t::clust"]
        [::std::mem::offset_of!(Agraphinfo_t, clust) - 240usize];
    ["Offset of field: Agraphinfo_t::dotroot"]
        [::std::mem::offset_of!(Agraphinfo_t, dotroot) - 248usize];
    ["Offset of field: Agraphinfo_t::nlist"]
        [::std::mem::offset_of!(Agraphinfo_t, nlist) - 256usize];
    ["Offset of field: Agraphinfo_t::rank"][::std::mem::offset_of!(Agraphinfo_t, rank) - 264usize];
    ["Offset of field: Agraphinfo_t::parent"]
        [::std::mem::offset_of!(Agraphinfo_t, parent) - 272usize];
    ["Offset of field: Agraphinfo_t::level"]
        [::std::mem::offset_of!(Agraphinfo_t, level) - 280usize];
    ["Offset of field: Agraphinfo_t::minrep"]
        [::std::mem::offset_of!(Agraphinfo_t, minrep) - 288usize];
    ["Offset of field: Agraphinfo_t::maxrep"]
        [::std::mem::offset_of!(Agraphinfo_t, maxrep) - 296usize];
    ["Offset of field: Agraphinfo_t::comp"][::std::mem::offset_of!(Agraphinfo_t, comp) - 304usize];
    ["Offset of field: Agraphinfo_t::minset"]
        [::std::mem::offset_of!(Agraphinfo_t, minset) - 320usize];
    ["Offset of field: Agraphinfo_t::maxset"]
        [::std::mem::offset_of!(Agraphinfo_t, maxset) - 328usize];
    ["Offset of field: Agraphinfo_t::minrank"]
        [::std::mem::offset_of!(Agraphinfo_t, minrank) - 336usize];
    ["Offset of field: Agraphinfo_t::maxrank"]
        [::std::mem::offset_of!(Agraphinfo_t, maxrank) - 340usize];
    ["Offset of field: Agraphinfo_t::has_flat_edges"]
        [::std::mem::offset_of!(Agraphinfo_t, has_flat_edges) - 344usize];
    ["Offset of field: Agraphinfo_t::showboxes"]
        [::std::mem::offset_of!(Agraphinfo_t, showboxes) - 345usize];
    ["Offset of field: Agraphinfo_t::fontnames"]
        [::std::mem::offset_of!(Agraphinfo_t, fontnames) - 348usize];
    ["Offset of field: Agraphinfo_t::nodesep"]
        [::std::mem::offset_of!(Agraphinfo_t, nodesep) - 352usize];
    ["Offset of field: Agraphinfo_t::ranksep"]
        [::std::mem::offset_of!(Agraphinfo_t, ranksep) - 356usize];
    ["Offset of field: Agraphinfo_t::ln"][::std::mem::offset_of!(Agraphinfo_t, ln) - 360usize];
    ["Offset of field: Agraphinfo_t::rn"][::std::mem::offset_of!(Agraphinfo_t, rn) - 368usize];
    ["Offset of field: Agraphinfo_t::leader"]
        [::std::mem::offset_of!(Agraphinfo_t, leader) - 376usize];
    ["Offset of field: Agraphinfo_t::rankleader"]
        [::std::mem::offset_of!(Agraphinfo_t, rankleader) - 384usize];
    ["Offset of field: Agraphinfo_t::expanded"]
        [::std::mem::offset_of!(Agraphinfo_t, expanded) - 392usize];
    ["Offset of field: Agraphinfo_t::installed"]
        [::std::mem::offset_of!(Agraphinfo_t, installed) - 393usize];
    ["Offset of field: Agraphinfo_t::set_type"]
        [::std::mem::offset_of!(Agraphinfo_t, set_type) - 394usize];
    ["Offset of field: Agraphinfo_t::label_pos"]
        [::std::mem::offset_of!(Agraphinfo_t, label_pos) - 395usize];
    ["Offset of field: Agraphinfo_t::exact_ranksep"]
        [::std::mem::offset_of!(Agraphinfo_t, exact_ranksep) - 396usize];
};
#[doc = " @addtogroup cgraph_node\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agnodeinfo_t {
    pub hdr: Agrec_t,
    pub shape: *mut shape_desc,
    pub shape_info: *mut ::std::os::raw::c_void,
    pub coord: pointf,
    pub width: f64,
    pub height: f64,
    pub bb: boxf,
    pub ht: f64,
    pub lw: f64,
    pub rw: f64,
    pub outline_width: f64,
    pub outline_height: f64,
    pub label: *mut textlabel_t,
    pub xlabel: *mut textlabel_t,
    pub alg: *mut ::std::os::raw::c_void,
    pub state: ::std::os::raw::c_char,
    pub gui_state: ::std::os::raw::c_uchar,
    pub clustnode: bool,
    pub pinned: ::std::os::raw::c_uchar,
    pub id: ::std::os::raw::c_int,
    pub heapindex: ::std::os::raw::c_int,
    pub hops: ::std::os::raw::c_int,
    pub pos: *mut f64,
    pub dist: f64,
    pub showboxes: ::std::os::raw::c_uchar,
    pub has_port: bool,
    pub rep: *mut node_t,
    pub set: *mut node_t,
    pub node_type: ::std::os::raw::c_char,
    pub mark: usize,
    pub onstack: ::std::os::raw::c_char,
    pub ranktype: ::std::os::raw::c_char,
    pub weight_class: ::std::os::raw::c_char,
    pub next: *mut node_t,
    pub prev: *mut node_t,
    pub in_: elist,
    pub out: elist,
    pub flat_out: elist,
    pub flat_in: elist,
    pub other: elist,
    pub clust: *mut graph_t,
    pub UF_size: ::std::os::raw::c_int,
    pub UF_parent: *mut node_t,
    pub rank: ::std::os::raw::c_int,
    pub order: ::std::os::raw::c_int,
    pub mval: f64,
    pub save_in: elist,
    pub save_out: elist,
    pub tree_in: elist,
    pub tree_out: elist,
    pub par: *mut edge_t,
    pub low: ::std::os::raw::c_int,
    pub lim: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub pad: [f64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agnodeinfo_t"][::std::mem::size_of::<Agnodeinfo_t>() - 472usize];
    ["Alignment of Agnodeinfo_t"][::std::mem::align_of::<Agnodeinfo_t>() - 8usize];
    ["Offset of field: Agnodeinfo_t::hdr"][::std::mem::offset_of!(Agnodeinfo_t, hdr) - 0usize];
    ["Offset of field: Agnodeinfo_t::shape"][::std::mem::offset_of!(Agnodeinfo_t, shape) - 16usize];
    ["Offset of field: Agnodeinfo_t::shape_info"]
        [::std::mem::offset_of!(Agnodeinfo_t, shape_info) - 24usize];
    ["Offset of field: Agnodeinfo_t::coord"][::std::mem::offset_of!(Agnodeinfo_t, coord) - 32usize];
    ["Offset of field: Agnodeinfo_t::width"][::std::mem::offset_of!(Agnodeinfo_t, width) - 48usize];
    ["Offset of field: Agnodeinfo_t::height"]
        [::std::mem::offset_of!(Agnodeinfo_t, height) - 56usize];
    ["Offset of field: Agnodeinfo_t::bb"][::std::mem::offset_of!(Agnodeinfo_t, bb) - 64usize];
    ["Offset of field: Agnodeinfo_t::ht"][::std::mem::offset_of!(Agnodeinfo_t, ht) - 96usize];
    ["Offset of field: Agnodeinfo_t::lw"][::std::mem::offset_of!(Agnodeinfo_t, lw) - 104usize];
    ["Offset of field: Agnodeinfo_t::rw"][::std::mem::offset_of!(Agnodeinfo_t, rw) - 112usize];
    ["Offset of field: Agnodeinfo_t::outline_width"]
        [::std::mem::offset_of!(Agnodeinfo_t, outline_width) - 120usize];
    ["Offset of field: Agnodeinfo_t::outline_height"]
        [::std::mem::offset_of!(Agnodeinfo_t, outline_height) - 128usize];
    ["Offset of field: Agnodeinfo_t::label"]
        [::std::mem::offset_of!(Agnodeinfo_t, label) - 136usize];
    ["Offset of field: Agnodeinfo_t::xlabel"]
        [::std::mem::offset_of!(Agnodeinfo_t, xlabel) - 144usize];
    ["Offset of field: Agnodeinfo_t::alg"][::std::mem::offset_of!(Agnodeinfo_t, alg) - 152usize];
    ["Offset of field: Agnodeinfo_t::state"]
        [::std::mem::offset_of!(Agnodeinfo_t, state) - 160usize];
    ["Offset of field: Agnodeinfo_t::gui_state"]
        [::std::mem::offset_of!(Agnodeinfo_t, gui_state) - 161usize];
    ["Offset of field: Agnodeinfo_t::clustnode"]
        [::std::mem::offset_of!(Agnodeinfo_t, clustnode) - 162usize];
    ["Offset of field: Agnodeinfo_t::pinned"]
        [::std::mem::offset_of!(Agnodeinfo_t, pinned) - 163usize];
    ["Offset of field: Agnodeinfo_t::id"][::std::mem::offset_of!(Agnodeinfo_t, id) - 164usize];
    ["Offset of field: Agnodeinfo_t::heapindex"]
        [::std::mem::offset_of!(Agnodeinfo_t, heapindex) - 168usize];
    ["Offset of field: Agnodeinfo_t::hops"][::std::mem::offset_of!(Agnodeinfo_t, hops) - 172usize];
    ["Offset of field: Agnodeinfo_t::pos"][::std::mem::offset_of!(Agnodeinfo_t, pos) - 176usize];
    ["Offset of field: Agnodeinfo_t::dist"][::std::mem::offset_of!(Agnodeinfo_t, dist) - 184usize];
    ["Offset of field: Agnodeinfo_t::showboxes"]
        [::std::mem::offset_of!(Agnodeinfo_t, showboxes) - 192usize];
    ["Offset of field: Agnodeinfo_t::has_port"]
        [::std::mem::offset_of!(Agnodeinfo_t, has_port) - 193usize];
    ["Offset of field: Agnodeinfo_t::rep"][::std::mem::offset_of!(Agnodeinfo_t, rep) - 200usize];
    ["Offset of field: Agnodeinfo_t::set"][::std::mem::offset_of!(Agnodeinfo_t, set) - 208usize];
    ["Offset of field: Agnodeinfo_t::node_type"]
        [::std::mem::offset_of!(Agnodeinfo_t, node_type) - 216usize];
    ["Offset of field: Agnodeinfo_t::mark"][::std::mem::offset_of!(Agnodeinfo_t, mark) - 224usize];
    ["Offset of field: Agnodeinfo_t::onstack"]
        [::std::mem::offset_of!(Agnodeinfo_t, onstack) - 232usize];
    ["Offset of field: Agnodeinfo_t::ranktype"]
        [::std::mem::offset_of!(Agnodeinfo_t, ranktype) - 233usize];
    ["Offset of field: Agnodeinfo_t::weight_class"]
        [::std::mem::offset_of!(Agnodeinfo_t, weight_class) - 234usize];
    ["Offset of field: Agnodeinfo_t::next"][::std::mem::offset_of!(Agnodeinfo_t, next) - 240usize];
    ["Offset of field: Agnodeinfo_t::prev"][::std::mem::offset_of!(Agnodeinfo_t, prev) - 248usize];
    ["Offset of field: Agnodeinfo_t::in_"][::std::mem::offset_of!(Agnodeinfo_t, in_) - 256usize];
    ["Offset of field: Agnodeinfo_t::out"][::std::mem::offset_of!(Agnodeinfo_t, out) - 272usize];
    ["Offset of field: Agnodeinfo_t::flat_out"]
        [::std::mem::offset_of!(Agnodeinfo_t, flat_out) - 288usize];
    ["Offset of field: Agnodeinfo_t::flat_in"]
        [::std::mem::offset_of!(Agnodeinfo_t, flat_in) - 304usize];
    ["Offset of field: Agnodeinfo_t::other"]
        [::std::mem::offset_of!(Agnodeinfo_t, other) - 320usize];
    ["Offset of field: Agnodeinfo_t::clust"]
        [::std::mem::offset_of!(Agnodeinfo_t, clust) - 336usize];
    ["Offset of field: Agnodeinfo_t::UF_size"]
        [::std::mem::offset_of!(Agnodeinfo_t, UF_size) - 344usize];
    ["Offset of field: Agnodeinfo_t::UF_parent"]
        [::std::mem::offset_of!(Agnodeinfo_t, UF_parent) - 352usize];
    ["Offset of field: Agnodeinfo_t::rank"][::std::mem::offset_of!(Agnodeinfo_t, rank) - 360usize];
    ["Offset of field: Agnodeinfo_t::order"]
        [::std::mem::offset_of!(Agnodeinfo_t, order) - 364usize];
    ["Offset of field: Agnodeinfo_t::mval"][::std::mem::offset_of!(Agnodeinfo_t, mval) - 368usize];
    ["Offset of field: Agnodeinfo_t::save_in"]
        [::std::mem::offset_of!(Agnodeinfo_t, save_in) - 376usize];
    ["Offset of field: Agnodeinfo_t::save_out"]
        [::std::mem::offset_of!(Agnodeinfo_t, save_out) - 392usize];
    ["Offset of field: Agnodeinfo_t::tree_in"]
        [::std::mem::offset_of!(Agnodeinfo_t, tree_in) - 408usize];
    ["Offset of field: Agnodeinfo_t::tree_out"]
        [::std::mem::offset_of!(Agnodeinfo_t, tree_out) - 424usize];
    ["Offset of field: Agnodeinfo_t::par"][::std::mem::offset_of!(Agnodeinfo_t, par) - 440usize];
    ["Offset of field: Agnodeinfo_t::low"][::std::mem::offset_of!(Agnodeinfo_t, low) - 448usize];
    ["Offset of field: Agnodeinfo_t::lim"][::std::mem::offset_of!(Agnodeinfo_t, lim) - 452usize];
    ["Offset of field: Agnodeinfo_t::priority"]
        [::std::mem::offset_of!(Agnodeinfo_t, priority) - 456usize];
    ["Offset of field: Agnodeinfo_t::pad"][::std::mem::offset_of!(Agnodeinfo_t, pad) - 464usize];
};
#[doc = " @addtogroup cgraph_edge\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agedgeinfo_t {
    pub hdr: Agrec_t,
    pub spl: *mut splines,
    pub tail_port: port,
    pub head_port: port,
    pub label: *mut textlabel_t,
    pub head_label: *mut textlabel_t,
    pub tail_label: *mut textlabel_t,
    pub xlabel: *mut textlabel_t,
    pub edge_type: ::std::os::raw::c_char,
    pub compound: ::std::os::raw::c_char,
    pub adjacent: ::std::os::raw::c_char,
    pub label_ontop: ::std::os::raw::c_char,
    pub gui_state: ::std::os::raw::c_uchar,
    pub to_orig: *mut edge_t,
    pub alg: *mut ::std::os::raw::c_void,
    pub factor: f64,
    pub dist: f64,
    pub path: Ppolyline_t,
    pub showboxes: ::std::os::raw::c_uchar,
    pub conc_opp_flag: bool,
    pub xpenalty: ::std::os::raw::c_short,
    pub weight: ::std::os::raw::c_int,
    pub cutvalue: ::std::os::raw::c_int,
    pub tree_index: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_short,
    pub minlen: ::std::os::raw::c_int,
    pub to_virt: *mut edge_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Agedgeinfo_t"][::std::mem::size_of::<Agedgeinfo_t>() - 240usize];
    ["Alignment of Agedgeinfo_t"][::std::mem::align_of::<Agedgeinfo_t>() - 8usize];
    ["Offset of field: Agedgeinfo_t::hdr"][::std::mem::offset_of!(Agedgeinfo_t, hdr) - 0usize];
    ["Offset of field: Agedgeinfo_t::spl"][::std::mem::offset_of!(Agedgeinfo_t, spl) - 16usize];
    ["Offset of field: Agedgeinfo_t::tail_port"]
        [::std::mem::offset_of!(Agedgeinfo_t, tail_port) - 24usize];
    ["Offset of field: Agedgeinfo_t::head_port"]
        [::std::mem::offset_of!(Agedgeinfo_t, head_port) - 72usize];
    ["Offset of field: Agedgeinfo_t::label"]
        [::std::mem::offset_of!(Agedgeinfo_t, label) - 120usize];
    ["Offset of field: Agedgeinfo_t::head_label"]
        [::std::mem::offset_of!(Agedgeinfo_t, head_label) - 128usize];
    ["Offset of field: Agedgeinfo_t::tail_label"]
        [::std::mem::offset_of!(Agedgeinfo_t, tail_label) - 136usize];
    ["Offset of field: Agedgeinfo_t::xlabel"]
        [::std::mem::offset_of!(Agedgeinfo_t, xlabel) - 144usize];
    ["Offset of field: Agedgeinfo_t::edge_type"]
        [::std::mem::offset_of!(Agedgeinfo_t, edge_type) - 152usize];
    ["Offset of field: Agedgeinfo_t::compound"]
        [::std::mem::offset_of!(Agedgeinfo_t, compound) - 153usize];
    ["Offset of field: Agedgeinfo_t::adjacent"]
        [::std::mem::offset_of!(Agedgeinfo_t, adjacent) - 154usize];
    ["Offset of field: Agedgeinfo_t::label_ontop"]
        [::std::mem::offset_of!(Agedgeinfo_t, label_ontop) - 155usize];
    ["Offset of field: Agedgeinfo_t::gui_state"]
        [::std::mem::offset_of!(Agedgeinfo_t, gui_state) - 156usize];
    ["Offset of field: Agedgeinfo_t::to_orig"]
        [::std::mem::offset_of!(Agedgeinfo_t, to_orig) - 160usize];
    ["Offset of field: Agedgeinfo_t::alg"][::std::mem::offset_of!(Agedgeinfo_t, alg) - 168usize];
    ["Offset of field: Agedgeinfo_t::factor"]
        [::std::mem::offset_of!(Agedgeinfo_t, factor) - 176usize];
    ["Offset of field: Agedgeinfo_t::dist"][::std::mem::offset_of!(Agedgeinfo_t, dist) - 184usize];
    ["Offset of field: Agedgeinfo_t::path"][::std::mem::offset_of!(Agedgeinfo_t, path) - 192usize];
    ["Offset of field: Agedgeinfo_t::showboxes"]
        [::std::mem::offset_of!(Agedgeinfo_t, showboxes) - 208usize];
    ["Offset of field: Agedgeinfo_t::conc_opp_flag"]
        [::std::mem::offset_of!(Agedgeinfo_t, conc_opp_flag) - 209usize];
    ["Offset of field: Agedgeinfo_t::xpenalty"]
        [::std::mem::offset_of!(Agedgeinfo_t, xpenalty) - 210usize];
    ["Offset of field: Agedgeinfo_t::weight"]
        [::std::mem::offset_of!(Agedgeinfo_t, weight) - 212usize];
    ["Offset of field: Agedgeinfo_t::cutvalue"]
        [::std::mem::offset_of!(Agedgeinfo_t, cutvalue) - 216usize];
    ["Offset of field: Agedgeinfo_t::tree_index"]
        [::std::mem::offset_of!(Agedgeinfo_t, tree_index) - 220usize];
    ["Offset of field: Agedgeinfo_t::count"]
        [::std::mem::offset_of!(Agedgeinfo_t, count) - 224usize];
    ["Offset of field: Agedgeinfo_t::minlen"]
        [::std::mem::offset_of!(Agedgeinfo_t, minlen) - 228usize];
    ["Offset of field: Agedgeinfo_t::to_virt"]
        [::std::mem::offset_of!(Agedgeinfo_t, to_virt) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gvlayout_features_t {
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gvlayout_features_t"][::std::mem::size_of::<gvlayout_features_t>() - 4usize];
    ["Alignment of gvlayout_features_t"][::std::mem::align_of::<gvlayout_features_t>() - 4usize];
    ["Offset of field: gvlayout_features_t::flags"]
        [::std::mem::offset_of!(gvlayout_features_t, flags) - 0usize];
};
#[doc = " ingroup plugin_api"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gvplugin_installed_t {
    pub id: ::std::os::raw::c_int,
    pub type_: *const ::std::os::raw::c_char,
    pub quality: ::std::os::raw::c_int,
    pub engine: *mut ::std::os::raw::c_void,
    pub features: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gvplugin_installed_t"][::std::mem::size_of::<gvplugin_installed_t>() - 40usize];
    ["Alignment of gvplugin_installed_t"][::std::mem::align_of::<gvplugin_installed_t>() - 8usize];
    ["Offset of field: gvplugin_installed_t::id"]
        [::std::mem::offset_of!(gvplugin_installed_t, id) - 0usize];
    ["Offset of field: gvplugin_installed_t::type_"]
        [::std::mem::offset_of!(gvplugin_installed_t, type_) - 8usize];
    ["Offset of field: gvplugin_installed_t::quality"]
        [::std::mem::offset_of!(gvplugin_installed_t, quality) - 16usize];
    ["Offset of field: gvplugin_installed_t::engine"]
        [::std::mem::offset_of!(gvplugin_installed_t, engine) - 24usize];
    ["Offset of field: gvplugin_installed_t::features"]
        [::std::mem::offset_of!(gvplugin_installed_t, features) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gvplugin_api_t {
    pub api: api_t,
    pub types: *mut gvplugin_installed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gvplugin_api_t"][::std::mem::size_of::<gvplugin_api_t>() - 16usize];
    ["Alignment of gvplugin_api_t"][::std::mem::align_of::<gvplugin_api_t>() - 8usize];
    ["Offset of field: gvplugin_api_t::api"][::std::mem::offset_of!(gvplugin_api_t, api) - 0usize];
    ["Offset of field: gvplugin_api_t::types"]
        [::std::mem::offset_of!(gvplugin_api_t, types) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gvplugin_library_t {
    pub packagename: *mut ::std::os::raw::c_char,
    pub apis: *mut gvplugin_api_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gvplugin_library_t"][::std::mem::size_of::<gvplugin_library_t>() - 16usize];
    ["Alignment of gvplugin_library_t"][::std::mem::align_of::<gvplugin_library_t>() - 8usize];
    ["Offset of field: gvplugin_library_t::packagename"]
        [::std::mem::offset_of!(gvplugin_library_t, packagename) - 0usize];
    ["Offset of field: gvplugin_library_t::apis"]
        [::std::mem::offset_of!(gvplugin_library_t, apis) - 8usize];
};
unsafe extern "C" {
    pub fn gvToggle(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn gvNEWcontext(
        builtins: *const lt_symlist_t,
        demand_loading: ::std::os::raw::c_int,
    ) -> *mut GVC_t;
}
unsafe extern "C" {
    pub fn gvContext() -> *mut GVC_t;
}
unsafe extern "C" {
    pub fn gvContextPlugins(
        builtins: *const lt_symlist_t,
        demand_loading: ::std::os::raw::c_int,
    ) -> *mut GVC_t;
}
unsafe extern "C" {
    pub fn gvcInfo(arg1: *mut GVC_t) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gvcVersion(arg1: *mut GVC_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gvcBuildDate(arg1: *mut GVC_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gvParseArgs(
        gvc: *mut GVC_t,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvNextInputGraph(gvc: *mut GVC_t) -> *mut graph_t;
}
unsafe extern "C" {
    pub fn gvPluginsGraph(gvc: *mut GVC_t) -> *mut graph_t;
}
unsafe extern "C" {
    pub fn gvLayout(
        gvc: *mut GVC_t,
        g: *mut graph_t,
        engine: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvLayoutJobs(gvc: *mut GVC_t, g: *mut graph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvLayoutDone(g: *mut graph_t) -> bool;
}
unsafe extern "C" {
    pub fn attach_attrs(g: *mut graph_t);
}
unsafe extern "C" {
    pub fn gvRender(
        gvc: *mut GVC_t,
        g: *mut graph_t,
        format: *const ::std::os::raw::c_char,
        out: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvRenderFilename(
        gvc: *mut GVC_t,
        g: *mut graph_t,
        format: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvRenderContext(
        gvc: *mut GVC_t,
        g: *mut graph_t,
        format: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvRenderData(
        gvc: *mut GVC_t,
        g: *mut graph_t,
        format: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
        length: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvFreeRenderData(data: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn gvRenderJobs(gvc: *mut GVC_t, g: *mut graph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvFreeLayout(gvc: *mut GVC_t, g: *mut graph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvFinalize(gvc: *mut GVC_t);
}
unsafe extern "C" {
    pub fn gvFreeContext(gvc: *mut GVC_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gvPluginList(
        gvc: *mut GVC_t,
        kind: *const ::std::os::raw::c_char,
        sz: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Add a library from your user application\n @param gvc Graphviz context to add library to\n @param lib library to add"]
    pub fn gvAddLibrary(gvc: *mut GVC_t, lib: *mut gvplugin_library_t);
}
unsafe extern "C" {
    #[doc = " Perform a Transitive Reduction on a graph\n @param g  graph to be transformed."]
    pub fn gvToolTred(g: *mut graph_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rust_aghead(ptr: *mut Agedge_t) -> *mut Agnode_t;
}
unsafe extern "C" {
    pub fn rust_agtail(ptr: *mut Agedge_t) -> *mut Agnode_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
